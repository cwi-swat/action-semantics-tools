definition

module obs/data/integers/Int

imports obs/data/booleans/Bool
   
exports

lexical syntax
[0]           -> Zero %%{cons("Zero")}
[1-9][0-9]*   -> PosNumeral %%{cons("PosNumeral")}
Zero -> Nat-Con %%{cons("zero-Nat-Con")}
PosNumeral -> Nat-Con %%{cons("posnumeral-Nat-Con")}

restrictions
	PosNumeral -/- [0-9]

context-free syntax

Nat-Con -> Numeral {cons("numeral")}

Numeral       -> Nat {cons("nat")}
%%PosNumeral    -> Pos {cons("posnumeral-Pos")}
Nat           -> Int {cons("int")}
Nat "-?" Nat  -> Nat {left, cons("monus")}
"(" Nat ")"            -> Nat {bracket, cons("bracket-Nat")}
"+" Nat                -> Int {cons("unary-plus")}
"-" Nat                -> Int {cons("unary-minus")}

Int "+" Int   -> Int {left, prefer, cons("plus")}
Int "-" Int   -> Int {left, prefer, cons("minus")}
Int "*" Int   -> Int {left, prefer, cons("times")}
Int ">" Int       -> Bool {prefer, cons("gt")}
Int ">=" Int      -> Bool {prefer, cons("ge")}
Int "<" Int       -> Bool {prefer, cons("lt")}
Int "<=" Int      -> Bool {prefer, cons("le")}
"(" Int ")"       -> Int {bracket, cons("bracket-int")}

context-free priorities

Int "*" Int -> Int > 
{ Int "+" Int -> Int {left}
  Int "-" Int -> Int {left}
}



hiddens

sorts 
  Int Nat PosNumeral Pos Numeral Nat-Con Zero
	
  variables
    "n" [0-9\']* -> Nat 
    "p" [0-9\']* -> PosNumeral
    "i" [0-9\']* -> Int


hiddens
  context-free syntax
    gt "(" Nat "," Nat ")" -> Bool %%{cons("hidden-nat-gt")}
    Nat "-//" Nat          -> Nat  %%{cons("hidden-nat-minus")}
    Nat ">-" Nat           -> Nat  %%{cons("hidden-nat-arrow")}

  variables 
    "char" [0-9]* -> CHAR
    "char*" [0-9]* -> CHAR*
    "char+" [0-9]* -> CHAR+

  context-free priorities
    Int "*" Int -> Int >
    {left: Int "+" Int -> Int {left} 
           Int "-" Int -> Int {left}
    }




module obs/data/booleans/Bool

imports obs/layout/Layout

exports
  sorts Bool BoolConst
  context-free syntax

  "true"        -> BoolConst {cons("true")}
  "false"       -> BoolConst {cons("false")}
  BoolConst     -> Bool {cons("bool")}

  "not" arg:Bool    -> Bool {prefer, cons("not")}

  lhs:Bool "|" rhs:Bool -> Bool {left, cons("or")}
  lhs:Bool "&" rhs:Bool -> Bool {left, cons("and")}
  "(" Bool ")"       -> Bool {bracket, cons("bracket-bool")}

context-free priorities
  Bool "&" Bool -> Bool >
  Bool "|" Bool -> Bool

hiddens
  variables
    "b"[0-9]* -> Bool


module obs/layout/Layout

exports lexical syntax
  %% added by TVDS
  "~~" ~[\n]* [\n] -> LAYOUT
  "%%" ~[\n]* [\n] -> LAYOUT

  [\ \t\n]      -> LAYOUT

context-free restrictions

  LAYOUT? -/- [\ \t\n]





module obs/aux/structs/Generic-List[X]

imports obs/data/integers/Int

exports

sorts List

context-free syntax

empty-list() -> List
head(List) -> X
tail(List) -> List
append(List, X) -> List
insert(List, X) -> List
concat(List,List) -> List
length(List) -> Int
replace-at(List, Int, X) -> List
element-at(List, Int) -> X

hiddens

context-free syntax
"[" X* "]" -> List

variables
"x"[0-9\']* -> X
"x*"[0-9\']* -> X*
"l"[0-9\']* -> List
"n"[0-9\']* -> Int