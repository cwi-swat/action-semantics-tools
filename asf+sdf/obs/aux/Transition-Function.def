definition

module obs/action/__AN-K-Action

imports obs/data/__AN-K-Data-Contract


exports 

context-free syntax

Terminated -> Action %%{cons("terminated")}

"(" Action ")" -> Action {bracket, prefer, cons("bracket")}
ActionConst -> Action {cons("const")}
prefix:ActionPrefix arg:Action -> Action {cons("prefix")}
lhs:Action infix:ActionInfix rhs:Action -> Action {left, cons("infix")}
"provide" data:Data -> Action {cons("provide")}
Action -> Datum {avoid,cons("action")}
ActionPrefix -> DataOpPrefix {avoid,cons("action-prefix")}
ActionInfix -> DataOpInfix {avoid,cons("action-infix")}

lexical syntax
"action" -> SortName 
"provide" -> DataOpPrefix {avoid}
 
hiddens 

sorts Action ActionPrefix ActionInfix ActionConst Terminated

variables
"A"[0-9\']* -> Action
"Ai"[0-9\']* -> ActionInfix
"Ap"[0-9\']* -> ActionPrefix
"d"[0-9\']* -> Data
"u"[0-9\']* -> Datum
"oc"[0-9\']* -> Outcome+
"t"[0-9\']* -> Terminated






module obs/aux/structs/Environment

imports obs/aux/structs/Finite-Map[Environment-Key Environment-Value]
		  [Finite-Map => Environment]

exports

sorts Environment

context-free syntax

new-environment() -> Environment
module obs/data/__AN-K-Data-Contract

imports obs/data/__AN-K-DataTypes 

exports

context-free syntax

	Datum -> Data {cons("datum")}

	DataConst  -> Data {cons("dataconst")}

	DataOpSort -> DataOpPrefix {cons("dataopsort")}

	"the" sort:DataSort -> DataOpSort 

	result DataOp Data  -> Data 
	holds DataPred Data -> DataConst 
	storable(Data) -> Bool
	bindable(Data) -> Bool
	sendable(Data) -> Bool

	prefix:DataOpPrefix "_"              -> DataOp {cons("dataopprefix")}
	"_" infix:DataOpInfix "_"           -> DataOp {cons("dataopinfix")}

	prefix:DataPredPrefix "_"   -> DataPred {cons("datapredprefix")}
	"_" infix:DataPredInfix "_"  -> DataPred {cons("datapredinfix")}


lexical syntax
   "true" -> DataConst 
   "false" -> DataConst 


context-free syntax

	"(" head:Data "," tail:{Data ","}+ ")" -> Data {cons("tuple")}
	"(" data:Data ")" -> Data {bracket, prefer,cons("bracket")}
	"(" ")" -> Data {prefer,cons("empty")}

context-free syntax
	nothing -> Data {cons("nothing")}

	Data "++" Data -> Data {prefer, left}

hiddens 

sorts
        DataPredInfix DataPredPrefix DataOpSort
        DataOpComponent Data DataOpPrefix 

context-free syntax

Data "!" Int -> Datum

variables
"o"[0-9\']* -> DataOp
"d"[0-9\']* -> Data
"ds"[0-9\']* -> DataSort
"d+"[0-9\']* -> {Data ","}+
"d*"[0-9\']* -> {Data ","}*
"n"[0-9\']* -> Int 
"p"[0-9\']* -> Nat-Con 
"u"[0-9\']* -> Datum
"i"[0-9\']* -> Int
"char+" -> CHAR+


module obs/data/__AN-K-DataTypes

imports obs/layout/Layout

exports

context-free syntax
  SortName                              -> DataSort {cons("sortname")}
  DataSort "*"                          -> DataSort {cons("star")}
  DataSort "+"                          -> DataSort {cons("plus")}
  DataSort "?"                          -> DataSort {cons("opt")}
  "(" DataSort "," {DataSort ","}+ ")"               -> DataSort {cons("tuple")}
%%  "(" {DataSort "|"}+ ")"               -> DataSort {cons("alt")}

  DataSort "|" DataSort -> DataSort {assoc}
  "(" DataSort ")" -> DataSort {bracket,avoid}
  "("")" -> DataSort

  "action" "[" outcome:Outcome+ "]"             -> DataSort {cons("outcome")}


context-free syntax
  "taking"  DataSort    -> Outcome {cons("taking")}
  "giving"  DataSort    -> Outcome {cons("giving")}
  "raising" DataSort    -> Outcome {cons("raising")}
  "failing"             -> Outcome {cons("failing")}

context-free priorities
{  DataSort "*"                          -> DataSort {cons("star")}
  DataSort "+"                          -> DataSort {cons("plus")}
  DataSort "?"                          -> DataSort {cons("opt")}
}
>
  DataSort "|" DataSort -> DataSort {assoc}


lexical syntax

  "data"                        -> SortName 
  "datum"                       -> SortName 

lexical syntax
  "\"" ~[\"\ \n\t]+ "\""        -> Module

hiddens
sorts

        Module SortName
        DataOp DataPred OutCome DataSort  



module obs/layout/Layout

exports lexical syntax
  %% added by TVDS
  "~~" ~[\n]* [\n] -> LAYOUT
  "%%" ~[\n]* [\n] -> LAYOUT

  [\ \t\n]      -> LAYOUT

context-free restrictions

  LAYOUT? -/- [\ \t\n]





module obs/aux/structs/Finite-Map[Key Value]

imports obs/data/booleans/Bool 
	obs/aux/structs/Finite-Set[Key]

exports

sorts Finite-Map Value

context-free syntax

Finite-Map "." Key ":=" Value -> Finite-Map
Finite-Map "." Key -> Value

"(" Finite-Map ")" -> Finite-Map {bracket}

Finite-Map "+" Finite-Map -> Finite-Map {assoc}

get(Finite-Map, Key) -> Value
put(Finite-Map, Key, Value) -> Finite-Map
remove(Finite-Map, Key) -> Finite-Map

has-key(Finite-Map, Key) -> Bool

domain(Finite-Map) -> Finite-Set

empty-map() -> Finite-Map

disjoint-union(Finite-Map, Finite-Map) -> Finite-Map
overriding(Finite-Map, Finite-Map) -> Finite-Map


%%aliases
Key # Value -> Tuple

context-free syntax

"{" Tuple* "}" -> Finite-Map


hiddens

variables
"k"[0-9\']* -> Key
"v"[0-9\']* -> Value
"m"[0-9\']* -> Finite-Map
"tup"[0-9\']* -> Tuple
"tup*"[0-9\']* -> Tuple*



module obs/aux/structs/Finite-Set[Elt]

imports obs/data/booleans/Bool 

exports 

sorts Finite-Set

context-free syntax

empty-set() -> Finite-Set

Finite-Set "+" Finite-Set -> Finite-Set {assoc}

element-of(Finite-Set, Elt) -> Bool
add-to-set(Finite-Set, Elt) -> Finite-Set
set(Elt) -> Finite-Set
set-union(Finite-Set, Finite-Set) -> Finite-Set
head(Finite-Set) -> Elt
tail(Finite-Set) -> Finite-Set

hiddens
context-free syntax

"{" Elt* "}" -> Finite-Set

variables
"e"[0-9\']* -> Elt
"e*"[0-9\']* -> Elt*
"s"[0-9\']* -> Finite-Set


module obs/data/booleans/Bool

imports obs/layout/Layout

exports
  sorts Bool BoolConst
  context-free syntax

  "true"        -> BoolConst {cons("true")}
  "false"       -> BoolConst {cons("false")}
  BoolConst     -> Bool {cons("bool")}

  "not" arg:Bool    -> Bool {prefer, cons("not")}

  lhs:Bool "|" rhs:Bool -> Bool {left, cons("or")}
  lhs:Bool "&" rhs:Bool -> Bool {left, cons("and")}
  "(" Bool ")"       -> Bool {bracket, cons("bracket-bool")}

context-free priorities
  Bool "&" Bool -> Bool >
  Bool "|" Bool -> Bool

hiddens
  variables
    "b"[0-9]* -> Bool


module obs/aux/Transition-Function

imports obs/aux/structs/Environment 
	obs/action/__AN-K-Action

exports

sorts Conf

context-free syntax

Action # Environment -> Conf

terminated(Action) -> Bool

exec(Action, Environment) -> Conf 
"exec+" "(" Action "," Environment ")" -> Conf


hiddens

variables
"d"[0-9\']* -> Data
"u"[0-9\']* -> Datum
"A"[0-9\']* -> Action
"a"[0-9\']* -> Environment %%IndexedTrace
"i"[0-9\']* -> Environment %%IndexedTrace
"t" -> Terminated
"e"[0-9\']* -> Environment
"AH"[0-9\']* -> AH
"n"[0-9\']* -> Int
"s"[0-9\']* -> Schedule
"bs"[0-9\']* -> Buffers
"tbs"[0-9\']* -> TaggedBuffer* %% !!!
"As"[0-9\']* -> Actions
"ag"[0-9\']* -> Agent
"ags"[0-9\']* -> Agents
"ti"[0-9\']* -> Time
"m"[0-9\']* -> Datum
"ms"[0-9\']* -> Messages
"mt"[0-9\']* -> MessageTag



