definition

module obs/aux/structs/Balanced-Tree[Elt]

imports obs/layout/Layout obs/data/integers/Int

exports 

sorts Tree

context-free syntax

%%Int -> Elt

elt-lt(Elt, Elt) -> Bool
elt-gt(Elt, Elt) -> Bool

size(Tree) -> Int

empty -> Tree {cons("empty")}
tree(elt:Elt, count:Int, lhs:Tree, rhs:Tree) -> Tree {cons("tree")}
new(Elt, Tree, Tree) -> Tree
member(Elt, Tree) -> Bool
find(Elt, Tree) -> Elt
min(Tree) -> Elt
weight -> Int
b-new(Elt, Tree, Tree) -> Tree
concat3(Elt, Tree, Tree) -> Tree

single-l(Elt, Tree, Tree) -> Tree
double-l(Elt, Tree, Tree) -> Tree
single-r(Elt, Tree, Tree) -> Tree
double-r(Elt, Tree, Tree) -> Tree

add(Tree, Elt) -> Tree
delete(Tree, Elt) -> Tree
del-aux(Tree, Tree) -> Tree
del-min(Tree) -> Tree

union(Tree, Tree) -> Tree
split-lt(Tree, Elt) -> Tree
split-gt(Tree, Elt) -> Tree

difference(Tree, Tree) -> Tree
concat(Tree, Tree) -> Tree
intersection(Tree, Tree) -> Tree

trim(Elt, Elt, Tree) -> Tree
uni-bd(Tree, Tree, Elt, Elt) -> Tree
trim-lo(Elt, Tree) -> Tree
trim-hi(Elt, Tree) -> Tree
uni-hi(Tree, Tree, Elt) -> Tree
uni-lo(Tree, Tree, Elt) -> Tree
hedge-union(Tree, Tree) -> Tree
disjoint-union(Tree, Tree) -> Tree

elt-list(Tree) -> Elt*

hiddens
variables
"e*"[0-9\']* -> Elt*
[abcvxyz][0-9\']* -> Elt
"lo" -> Elt
"hi" -> Elt
[lrstu]+[0-9\']* -> Tree
"left" -> Tree
"right" -> Tree
"n"[0-9\']* -> Int

module obs/data/__AN-K-Data-Contract

imports obs/data/__AN-K-DataTypes 

exports

context-free syntax

	Datum -> Data {cons("datum")}

	DataConst  -> Data {cons("dataconst")}

	DataOpSort -> DataOpPrefix {cons("dataopsort")}

	"the" sort:DataSort -> DataOpSort 

	result DataOp Data  -> Data 
	holds DataPred Data -> DataConst 
	storable(Data) -> Bool
	bindable(Data) -> Bool
	sendable(Data) -> Bool

	prefix:DataOpPrefix "_"              -> DataOp {cons("dataopprefix")}
	"_" infix:DataOpInfix "_"           -> DataOp {cons("dataopinfix")}

	prefix:DataPredPrefix "_"   -> DataPred {cons("datapredprefix")}
	"_" infix:DataPredInfix "_"  -> DataPred {cons("datapredinfix")}


lexical syntax
   "true" -> DataConst 
   "false" -> DataConst 


context-free syntax

	"(" head:Data "," tail:{Data ","}+ ")" -> Data {cons("tuple")}
	"(" data:Data ")" -> Data {bracket, prefer,cons("bracket")}
	"(" ")" -> Data {prefer,cons("empty")}

context-free syntax
	nothing -> Data {cons("nothing")}

	Data "++" Data -> Data {prefer, left}

hiddens 

sorts
        DataPredInfix DataPredPrefix DataOpSort
        DataOpComponent Data DataOpPrefix 

context-free syntax

Data "!" Int -> Datum

variables
"o"[0-9\']* -> DataOp
"d"[0-9\']* -> Data
"ds"[0-9\']* -> DataSort
"d+"[0-9\']* -> {Data ","}+
"d*"[0-9\']* -> {Data ","}*
"n"[0-9\']* -> Int 
"p"[0-9\']* -> Nat-Con 
"u"[0-9\']* -> Datum
"i"[0-9\']* -> Int
"char+" -> CHAR+


module obs/data/integers/Int

imports obs/data/booleans/Bool
   
exports

lexical syntax
[0]           -> Zero %%{cons("Zero")}
[1-9][0-9]*   -> PosNumeral %%{cons("PosNumeral")}
Zero -> Nat-Con %%{cons("zero-Nat-Con")}
PosNumeral -> Nat-Con %%{cons("posnumeral-Nat-Con")}

restrictions
	PosNumeral -/- [0-9]

context-free syntax

Nat-Con -> Numeral {cons("numeral")}

Numeral       -> Nat {cons("nat")}
%%PosNumeral    -> Pos {cons("posnumeral-Pos")}
Nat           -> Int {cons("int")}
Nat "-?" Nat  -> Nat {left, cons("monus")}
"(" Nat ")"            -> Nat {bracket, cons("bracket-Nat")}
"+" Nat                -> Int {cons("unary-plus")}
"-" Nat                -> Int {cons("unary-minus")}

Int "+" Int   -> Int {left, prefer, cons("plus")}
Int "-" Int   -> Int {left, prefer, cons("minus")}
Int "*" Int   -> Int {left, prefer, cons("times")}
Int ">" Int       -> Bool {prefer, cons("gt")}
Int ">=" Int      -> Bool {prefer, cons("ge")}
Int "<" Int       -> Bool {prefer, cons("lt")}
Int "<=" Int      -> Bool {prefer, cons("le")}
"(" Int ")"       -> Int {bracket, cons("bracket-int")}

context-free priorities

Int "*" Int -> Int > 
{ Int "+" Int -> Int {left}
  Int "-" Int -> Int {left}
}



hiddens

sorts 
  Int Nat PosNumeral Pos Numeral Nat-Con Zero
	
  variables
    "n" [0-9\']* -> Nat 
    "p" [0-9\']* -> PosNumeral
    "i" [0-9\']* -> Int


hiddens
  context-free syntax
    gt "(" Nat "," Nat ")" -> Bool %%{cons("hidden-nat-gt")}
    Nat "-//" Nat          -> Nat  %%{cons("hidden-nat-minus")}
    Nat ">-" Nat           -> Nat  %%{cons("hidden-nat-arrow")}

  variables 
    "char" [0-9]* -> CHAR
    "char*" [0-9]* -> CHAR*
    "char+" [0-9]* -> CHAR+

  context-free priorities
    Int "*" Int -> Int >
    {left: Int "+" Int -> Int {left} 
           Int "-" Int -> Int {left}
    }




module obs/layout/Layout

exports lexical syntax
  %% added by TVDS
  "~~" ~[\n]* [\n] -> LAYOUT
  "%%" ~[\n]* [\n] -> LAYOUT

  [\ \t\n]      -> LAYOUT

context-free restrictions

  LAYOUT? -/- [\ \t\n]





module obs/data/booleans/Bool

imports obs/layout/Layout

exports
  sorts Bool BoolConst
  context-free syntax

  "true"        -> BoolConst {cons("true")}
  "false"       -> BoolConst {cons("false")}
  BoolConst     -> Bool {cons("bool")}

  "not" arg:Bool    -> Bool {prefer, cons("not")}

  lhs:Bool "|" rhs:Bool -> Bool {left, cons("or")}
  lhs:Bool "&" rhs:Bool -> Bool {left, cons("and")}
  "(" Bool ")"       -> Bool {bracket, cons("bracket-bool")}

context-free priorities
  Bool "&" Bool -> Bool >
  Bool "|" Bool -> Bool

hiddens
  variables
    "b"[0-9]* -> Bool


module obs/data/__AN-K-DataTypes

imports obs/layout/Layout

exports

context-free syntax
  SortName                              -> DataSort {cons("sortname")}
  DataSort "*"                          -> DataSort {cons("star")}
  DataSort "+"                          -> DataSort {cons("plus")}
  DataSort "?"                          -> DataSort {cons("opt")}
  "(" DataSort "," {DataSort ","}+ ")"               -> DataSort {cons("tuple")}
%%  "(" {DataSort "|"}+ ")"               -> DataSort {cons("alt")}

  DataSort "|" DataSort -> DataSort {assoc}
  "(" DataSort ")" -> DataSort {bracket,avoid}
  "("")" -> DataSort

  "action" "[" outcome:Outcome+ "]"             -> DataSort {cons("outcome")}


context-free syntax
  "taking"  DataSort    -> Outcome {cons("taking")}
  "giving"  DataSort    -> Outcome {cons("giving")}
  "raising" DataSort    -> Outcome {cons("raising")}
  "failing"             -> Outcome {cons("failing")}

context-free priorities
{  DataSort "*"                          -> DataSort {cons("star")}
  DataSort "+"                          -> DataSort {cons("plus")}
  DataSort "?"                          -> DataSort {cons("opt")}
}
>
  DataSort "|" DataSort -> DataSort {assoc}


lexical syntax

  "data"                        -> SortName 
  "datum"                       -> SortName 

lexical syntax
  "\"" ~[\"\ \n\t]+ "\""        -> Module

hiddens
sorts

        Module SortName
        DataOp DataPred OutCome DataSort  



module obs/data/__AN-K-Tree-Set

imports obs/data/__AN-K-Data-Contract 
	obs/aux/structs/Balanced-Tree[Data][Tree=>Tree-Set]

exports

context-free syntax

Tree-Set -> Datum

lexical syntax
"t-set" -> DataOpPrefix
"t-union" -> DataOpPrefix
"t-intersection" -> DataOpPrefix
"t-difference" -> DataOpPrefix
"t-member" -> DataPredPrefix
"t-add" -> DataOpPrefix

"tree-set" -> SortName

hiddens
variables
"s"[0-9\']* -> Tree-Set
"d"[0-9\']* -> Data
