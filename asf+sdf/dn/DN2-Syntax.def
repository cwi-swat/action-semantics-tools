definition

module dn/syn/internal/Action

imports an/syn/kernel/Normal-Action %% an/syn/kernel/Action

exports

sorts Data

context-free syntax
	Action -> Datum
	"action" -> SortName {cons("action-sortname")}

	ActionInfix -> DataOpInfix
	ActionPrefix -> DataOpPrefix

	"provide" -> DataOpPrefix {avoid,cons("provide-dataopprefix")}


module dn/syn/internal/Bindings

imports aux/Finite-Map[Token Datum][Finite-Map=>Bindings Entry=>Bindings-Entry]
	dn/syn/lib/Token

exports

context-free syntax
	Bindings -> Datum
	"bindings" -> SortName {cons("bindings-sortname")}

	"no" "bindings" -> Bindings {cons("no-bindings")}

	"binding" -> DataOpPrefix {cons("binding-prefix")}
	"bound" -> DataOpPrefix {cons("bound-prefix")}
	"disjoint" "union" -> DataOpPrefix {cons("disjoint-union-prefix")}
	"overriding" -> DataOpPrefix {cons("overriding-prefix")}

module dn/syn/internal/Cell

exports

sorts Cell

context-free syntax
	Cell -> Datum
	"cell" -> SortName {cons("cell-sortname")}



	

module dn/syn/internal/Agent

exports

sorts Agent

context-free syntax
	"agent" -> SortName {cons("agent-sortname")}
	Agent -> Datum


module dn/syn/lib/Token

imports basic/Strings

exports

sorts Token

context-free syntax
	String -> Token
	Token -> Datum
	"token" -> SortName


module dn/syn/lib/List

imports aux/List[Data]

exports

context-free syntax
	List -> Datum
	"list" -> SortName {cons("list-sortname")}
	"list" -> DataOpPrefix {cons("list-dataopprefix")}



module dn/syn/lib/Integers

imports basic/Integers

exports

context-free syntax
	Integer -> Datum
	"int" -> SortName {cons("int-sortname")}

	"+" -> DataOpInfix {cons("plus-infix")}
	"-" -> DataOpInfix {cons("minus-infix")}
	"*" -> DataOpInfix {cons("times-infix")}

	">" -> DataPredInfix {cons("gt-infix")}
	"<" -> DataPredInfix {cons("lt-infix")}
	">=" -> DataPredInfix {cons("geq-infix")}
	"<=" -> DataPredInfix {cons("leq-infix")}


module dn/syn/lib/Booleans

imports basic/Booleans

exports

context-free syntax
	Boolean -> Datum
	"boolean" -> SortName {cons("boolean-sortname")}
	"not" -> DataOpPrefix {cons("not-dataop-prefix")}
	"&" -> DataOpInfix {cons("and-dataop-infix")}
	"|" -> DataOpInfix {cons("or-dataop-infix")}

	
module dn/syn/kernel/Kernel-Data

imports basic/Integers
	dn/syn/kernel/Data
	dn/syn/kernel/DataSort

exports

context-free syntax
	"#" NatCon -> DataOpPrefix {cons("projection-prefix")}
	"="  -> DataPredInfix {cons("equals-infix")}





module an/syn/kernel/Normal-Action

imports an/syn/kernel/Normal-Outcome 

exports

sorts Action ActionInfix ActionPrefix

context-free syntax
	"provide" Data -> Action {cons("provide-data")}
	"copy" -> Action {cons("copy")}
	"then" -> ActionInfix {cons("then-infix")}
	"and" "then"  -> ActionInfix {cons("and-then-infix")}
	"and"  -> ActionInfix {cons("and-infix")}
	"indivisibly" -> ActionPrefix {cons("indivisibly-prefix")}


module an/syn/kernel/Normal-Outcome

imports an/syn/kernel/Action 
	dn/syn/kernel/Data

exports

sorts Terminated

context-free syntax

	"normal" Data -> Terminated {cons("normal")}

module dn/syn/kernel/Data

imports aux/Tuple[Datum][Tuple => Data]

exports

sorts Data Datum

context-free syntax
	Datum -> Data

module an/syn/kernel/Action

imports basic/Whitespace

exports

sorts Action

context-free syntax
	Action ActionInfix Action -> Action {left,cons("action-infix")}
	ActionPrefix Action -> Action {cons("action-prefix")}
	"(" Action ")" -> Action {bracket,prefer,cons("action-bracket")}

context-free priorities
	ActionPrefix Action -> Action >
	Action ActionInfix Action -> Action {left}
	
module aux/Tuple[X]

imports basic/Integers
	basic/Whitespace


exports

sorts Tuple

context-free syntax

	"(" {X ","}* ")" -> Tuple {cons("tuple")}

	X "::" Tuple -> Tuple {cons("tuple-insert")}

	Tuple "++" Tuple -> Tuple {left,cons("tuple-concat")}

	Tuple "!" Integer -> X {cons("tuple-projection")}

hiddens

variables
	"n"[0-9\']* -> Integer
	"t"[0-9\']* -> Tuple
	"x"[0-9\']* -> X
	"x*"[0-9\']* -> {X ","}*
	"x+"[0-9\']* -> {X ","}+


module basic/Whitespace

exports
  lexical syntax
    [\ \t\n]	-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\ \t\n]

module basic/Integers

imports
  basic/Booleans

exports
  sorts NatCon Natural Integer
  lexical syntax
    [0-9]+ -> NatCon
  context-free syntax
     NatCon           		-> Natural
     Natural "-/" Natural	-> Natural {left}
     "(" Natural ")"       	-> Natural {bracket}
     Natural               	-> Integer
     "+" Natural           	-> Integer
     "-" Natural           	-> Integer
     Integer "+" Integer       	-> Integer {left}
     Integer "-" Integer       	-> Integer {left}
     Integer "*" Integer       	-> Integer {left}
     Integer ">" Integer       	-> Boolean
     Integer ">=" Integer      	-> Boolean
     Integer "<" Integer       	-> Boolean
     Integer "<=" Integer      	-> Boolean
     "(" Integer ")"       	-> Integer {bracket}

  context-free priorities
    Integer "*" Integer -> Integer >
    {left: Integer "+" Integer -> Integer
           Integer "-" Integer -> Integer}

hiddens
  imports asf/syntax/Comments
   
  context-free syntax
    gt "(" Natural "," Natural ")" -> Boolean
    Natural "-//" Natural          -> Natural
    Natural ">-" Natural           -> Natural

  variables
    "Nat" [0-9\']*      -> Natural 
    "Nat-con" [0-9\']*  -> NatCon
    "Int" [0-9\']*      -> Integer

  variables 
    "n" [0-9]* -> NatCon
    "c" [0-9]* -> CHAR
    "x" [0-9]* -> CHAR*
    "y" [0-9]* -> CHAR+

module basic/Booleans

exports
  sorts BoolCon
  context-free syntax
    "true"  -> BoolCon {constructor}
    "false" -> BoolCon {constructor}

  sorts Boolean
  context-free syntax
    BoolCon -> Boolean

    Boolean "|" Boolean 	-> Boolean {left}
    Boolean "&" Boolean 	-> Boolean {left}
    "not" "(" Boolean ")" 	-> Boolean
    "(" Boolean ")"       	-> Boolean {bracket}

  context-free priorities
    Boolean "&" Boolean -> Boolean >
    Boolean "|" Boolean -> Boolean

hiddens
  imports
    asf/syntax/Comments
  variables
    "Bool"[0-9]* 	-> Boolean
    "Bool-con"[0-9]* 	-> BoolCon


module asf/syntax/Comments

imports
  basic/Whitespace

exports
  lexical syntax
    "%%" ~[\n]* "\n"	-> LAYOUT
    "%" ~[\%\n]+ "%"	-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\%]

module aux/Finite-Map[Key Value]

imports basic/Whitespace
	basic/Booleans

exports

sorts Finite-Map Key Value

exports

context-free syntax
	"[" "]" -> Finite-Map {cons("empty-map")}
	Finite-Map Entry -> Finite-Map {cons("non-empty-map")}
	"[" Value "/" Key "]" -> Entry {cons("map-entry")}
	"(" Finite-Map ")" -> Finite-Map {bracket,cons("map-bracket")}

	eval(Key, Finite-Map) -> Value {cons("eval-map")}
	Finite-Map "@" Key -> Value {cons("eval-at-map")}
	
	is-empty(Finite-Map) -> Boolean {cons("is-empty")}

	Finite-Map "+" Entry -> Finite-Map {cons("plus-map-entry")}
	Finite-Map "-" Entry -> Finite-Map {cons("minus-map-entry")}
	Finite-Map "-" Key -> Finite-Map {cons("minus-key")}
	Finite-Map "--" Value -> Finite-Map {cons("minus-value")}
	Finite-Map "+" Finite-Map -> Finite-Map {left,cons("map-plus-map")}

	has-key(Key, Finite-Map) -> Boolean {cons("has-key")}
	has-value(Value, Finite-Map) -> Boolean {cons("has-value")}
	

	

hiddens
variables
	"m"[0-9\']* -> Finite-Map
	"k"[0-9\']* -> Key
	"v"[0-9\']* -> Value

module basic/Strings

%% This module defines strings with continuations and escaped newlines, tabs and 
%% backslashes

hiddens 
  sorts Escaped Normal

exports
  sorts StrCon String
  lexical syntax
    ~[\0-\31\"\\\n]                         -> Normal
    "\\n" | "\\t" |  "\\\"" | "\\\\"        -> Escaped
    "\"" {Contents "\\\n"}+ "\"" -> StrCon

  aliases
    (Normal | Escaped)* -> Contents

  context-free syntax
    StrCon             -> String {constructor}
    String "||" String -> String {left}
    remove-continuations(String) -> String

hiddens
  imports
    basic/Whitespace
  variables
    "Chars" [0-9]* -> CHAR*

  variables
    "Str-con" [0-9\']* -> StrCon
    "Str" [0-9\']*     -> String
module aux/List[X]

imports basic/Whitespace

exports

sorts List

context-free syntax
	list(X) -> List {cons("x-to-list")}
	empty-list() -> List {cons("empty-list")}
	head(List) -> X {cons("list-head")}
	tail(List) -> List {cons("list-tail")}
	insert(X, List) -> List {cons("list-insert")}
	append(X, List) -> List {cons("list-append")}
	


hiddens
context-free syntax

	"[" X* "]" -> List {cons("list")}

variables
	"x"[0-9\']* -> X
	"x*"[0-9\']* -> X*
	"l"[0-9\']* -> List
module dn/syn/kernel/DataSort

imports aux/Tuple[SortName][Tuple => DataSort]

exports

sorts DataSort

context-free syntax
	SortName "+" -> DataSort {cons("sortname-plus")}
	SortName "*" -> DataSort {cons("sortname-star")}
	SortName "?" -> DataSort {cons("sortname-opt")}
	SortName -> DataSort 

%% Add outcomes later.

module dn/DN2-Syntax

imports dn/syn/kernel/Kernel-Data
	dn/syn/lib/Booleans
	dn/syn/lib/Integers
	dn/syn/lib/List	
	dn/syn/lib/Token
	dn/syn/internal/Agent
	dn/syn/internal/Cell
	dn/syn/internal/Bindings
	dn/syn/internal/Action




