action-to-c(
give current bindings and (copy then create then (provide "n" and give the cell _ then give binding _) and (provide 1 then create then (provide "i" and give the cell _ then give binding _) and (provide 0 then create then (provide "j" and give the cell _ then give binding _) and (provide 0 then create then (provide "k" and give the cell _ then give binding _)) then give disjoint union _) then give disjoint union _) then give disjoint union _) then give overriding _ hence (give current bindings and (provide ( "unf" , give current bindings and provide "k" then give bound _ then give the cell _ then inspect and (give current bindings and provide "n" then give bound _ then give the cell _ then inspect) then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then (check _ < _ exceptionally fail and copy) then provide true otherwise provide false) then (select ( give the data _ then give tupleToList _ and (provide true then give tupleToList _) then (check _ = _ exceptionally fail and copy) then (give current bindings and provide "j" then give bound _ then give the cell _ and (give current bindings and provide "i" then give bound _ then give the cell _ then inspect and (give current bindings and provide "j" then give bound _ then give the cell _ then inspect) then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then give _ + _)) then update and then (give current bindings and provide "i" then give bound _ then give the cell _ and (give current bindings and provide "j" then give bound _ then give the cell _ then inspect and (give current bindings and provide "i" then give bound _ then give the cell _ then inspect) then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then give _ - _)) then update and then (give current bindings and provide "k" then give bound _ then give the cell _ and (give current bindings and provide "k" then give bound _ then give the cell _ then inspect and provide 1 then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then give _ + _)) then update))) and then (give the data _ then give provide _ and (give current bindings then give provide _ and (give current bindings and provide "unf" then give bound _ then give the action [ taking (  ) giving bindings ] _) then give _ hence _) then give _ then _ then enact) or give the data _ then give tupleToList _ and (provide false then give tupleToList _) then (check _ = _ exceptionally fail and copy) then provide ( ) ) otherwise (provide ( ) then raise)) ) then give binding _) then give overriding _ hence (give current bindings and provide "k" then give bound _ then give the cell _ then inspect and (give current bindings and provide "n" then give bound _ then give the cell _ then inspect) then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then (check _ < _ exceptionally fail and copy) then provide true otherwise provide false) then (select ( give the data _ then give tupleToList _ and (provide true then give tupleToList _) then (check _ = _ exceptionally fail and copy) then (give current bindings and provide "j" then give bound _ then give the cell _ and (give current bindings and provide "i" then give bound _ then give the cell _ then inspect and (give current bindings and provide "j" then give bound _ then give the cell _ then inspect) then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then give _ + _)) then update and then (give current bindings and provide "i" then give bound _ then give the cell _ and (give current bindings and provide "j" then give bound _ then give the cell _ then inspect and (give current bindings and provide "i" then give bound _ then give the cell _ then inspect) then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then give _ - _)) then update and then (give current bindings and provide "k" then give bound _ then give the cell _ and (give current bindings and provide "k" then give bound _ then give the cell _ then inspect and provide 1 then (give # 1 _ then give the int _ and (give # 2 _ then give the int _) then give _ + _)) then update))) and then (give the data _ then give provide _ and (give current bindings then give provide _ and (give current bindings and provide "unf" then give bound _ then give the action [ taking (  ) giving bindings ] _) then give _ hence _) then give _ then _ then enact) or give the data _ then give tupleToList _ and (provide false then give tupleToList _) then (check _ = _ exceptionally fail and copy) then provide ( ) ) otherwise (provide ( ) then raise))) exceptionally (give the data _ then give tupleToList _ and (provide "break" then give tupleToList _) then (check _ = _ exceptionally fail and copy) then provide ( ) otherwise raise)))
