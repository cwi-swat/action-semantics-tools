module acc/Primitive-AN-to-C

imports acc/AN2-to-C-Functions
	d2a/Data-to-ATerm
	ai/Type-Inference-Data


exports

context-free syntax

pa-to-expression(Action,Expression,Expression,Environment) -> Expression

make-computation(Action, Expression) -> Expression
make-typecheck(DataSort, Expression) -> Expression
make-checked-expression(Action,Expression) -> Expression
make-conditional(Expression,Expression) -> Expression
data-to-expression(Data, Environment) -> Expression

aterm-to-pattern(ATerm) -> STRINGliteral
aterms-to-string(ATerms) -> STRINGliteral

hiddens

context-free syntax

STRINGliteral "||" STRINGliteral -> STRINGliteral {left}

variables
"env"[0-9\']* -> Environment
"str"[0-9\']* -> STRINGliteral
"defs"[0-9\']* -> ExternalDefinitions
"exp"[0-9\']* -> PrimaryExpression
"stat"[0-9\']* -> Statement
"stats"[0-9\']* -> Statements
"id"[0-9\']* -> ID
"n"[0-9\']* -> Int
"char+"[0-9\']* -> CHAR+
"ao"[0-9\']* -> ActionOutcome
"t"[0-9\']* -> Type
"T"[0-9\']* -> Terminated
"ds"[0-9\']* -> DataSort
"oc"[0-9\']* -> Outcome+
"A"[0-9\']* -> Action
"Ap"[0-9\']* -> ActionPrefix
"Ac"[0-9\']* -> ActionConst
"Ai"[0-9\']* -> ActionInfix
"C"[0-9\']* -> {Action "or"}+
"d"[0-9]* -> Data
"d+"[0-9]* -> {Data ","}+
"o"[0-9\']* -> DataOp
"oi"[0-9\']* -> DataOpInfix
"op"[0-9\']* -> DataOpPrefix
"q"[0-9\']* -> DataPred
"u"[0-9\']* -> Datum
"tk"[0-9\']* -> Token
"nat"[0-9\']* -> Nat
"pos"[0-9\']* -> Pos
"nat-con"[0-9\']* -> Nat-Con
"b"[0-9\']* -> DataConst
"bs"[0-9\']* -> Bindings

"lit"[0-9\']* -> Literal
"intcon"[0-9\']* -> IntCon
"afun"[0-9\']* -> AFun
"aterm"[0-9\']* -> ATerm
"aterms"[0-9\']* -> {ATerm ","}+