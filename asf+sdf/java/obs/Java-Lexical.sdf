module java/Java-Lexical
imports java/Layout

exports
  lexical syntax
    [0] [xX] [0-9a-fA-F]+ [lL]? -> IntegerLiteral
    [0-9]+ [lL]? -> IntegerLiteral
    [0-9]* "." [0-9]* ( [eE] [\+\-]? [0-9]+ )? [fFdD]? -> FloatingPointLiteral
    [0-9]* "."? [0-9]* [eE] [\+\-]? [0-9]+ [fFdD]? -> FloatingPointLiteral
    "true" -> BooleanLiteral
    "false" -> BooleanLiteral
    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
    UnicodeEscape -> SingleCharacter
    ~[\'\\] -> SingleCharacter
    "'" SingleCharacter "'" -> CharacterLiteral

  lexical syntax
    "\\" [btnfr\"\'\\] -> EscapeSequence
    "\\" [0-7] -> EscapeSequence
    "\\" [0-7] [0-7] -> EscapeSequence
    "\\" [0-3] [0-7] [0-7] -> EscapeSequence
    "'" EscapeSequence "'" -> CharacterLiteral
    ~[\"\\] -> StringCharacter
    EscapeSequence -> StringCharacter
    "\"" StringCharacter* "\"" -> StringLiteral
    "null" -> NullLiteral
    [\$\_A-Za-z] [\$\_A-Za-z0-9]* -> Identifier
    "void" -> Identifier {reject}
    "class" -> Identifier {reject}
    "extends" -> Identifier {reject}
    "implements" -> Identifier {reject}
    "static" -> Identifier {reject}
    "this" -> Identifier {reject}
    "super" -> Identifier {reject}
    "new" -> Identifier {reject}
    "instanceof" -> Identifier {reject}
    "interface" -> Identifier {reject}
    "true" -> Identifier {reject}
    "false" -> Identifier {reject}
    "null" -> Identifier {reject}
    "throws" -> Identifier {reject}
    "public" -> Identifier {reject}
    "protected" -> Identifier {reject}
    "private" -> Identifier {reject}
    "abstract" -> Identifier {reject}
    "final" -> Identifier {reject}
    "native" -> Identifier {reject}
    "synchronized" -> Identifier {reject}
    "transient" -> Identifier {reject}
    "volatile" -> Identifier {reject}
    "package" -> Identifier {reject}
    "import" -> Identifier {reject}
    "if" -> Identifier {reject}
    "else" -> Identifier {reject}
    "switch" -> Identifier {reject}
    "case" -> Identifier {reject}
    "default" -> Identifier {reject}
    "while" -> Identifier {reject}
    "do" -> Identifier {reject}
    "for" -> Identifier {reject}
    "break" -> Identifier {reject}
    "continue" -> Identifier {reject}
    "return" -> Identifier {reject}
    "throw" -> Identifier {reject}
    "try" -> Identifier {reject}
    "catch" -> Identifier {reject}
    "finally" -> Identifier {reject}
    "boolean" -> Identifier {reject}
    "byte" -> Identifier {reject}
    "short" -> Identifier {reject}
    "int" -> Identifier {reject}
    "long" -> Identifier {reject}
    "char" -> Identifier {reject}
    "float" -> Identifier {reject}
    "double" -> Identifier {reject}

  lexical restrictions
    %%"void" "class" "extends" "implements" "static" "this" "super" "new" "instanceof" "interface" "true" "false" "null" "throws" "public" "protected" "private" "abstract" "final" "native" "synchronized" "transient" "volatile" "package" "import" "if" "else" "switch" "case" "default" "while" "do" "for" "break" "continue" "return" "throw" "try" "catch" "finally" "boolean" "byte" "short" "int" "long" "char" "float" "double" -/- [a-zA-Z0-9\_]
    Identifier -/- [a-zA-Z0-9\_\$]
    IntegerLiteral -/- [a-zA-Z0-9\_\.]

