module Generic-Java
imports Java

exports
  context-free syntax

    %% declarations

    ClassMod*     "class"     Id TypeParams? Super? Interfaces? ClassBody -> ClassDec {cons("ClassDec"), prefer}
    InterfaceMod* "interface" Id TypeParams? ExtendsInterfaces? InterfaceBody -> InterfaceDec {cons("InterfaceDec"), prefer}

    MethodMod* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? -> MethodHead {cons("Head"), prefer}

    %% expressions 

             "new" ClassOrInterfaceType TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance"), prefer}
    Expr "." "new" Id                   TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance"), prefer}

    %% types

    { ClassTypePart "."}+     -> ClassType {cons("GClassType"), prefer}
    { InterfaceTypePart "."}+ -> InterfaceType {cons("GInterfaceType"), prefer}

    Id          -> ClassTypePart
    Id TypeArgs -> ClassTypePart {cons("ParamClass")}

    Id          -> InterfaceTypePart
    Id TypeArgs -> InterfaceTypePart {cons("ParamInterface")}

    %% misc

    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}
    "<" {RefType   ","}+ ">" -> TypeArgs   {cons("TypeArgs")}

    TypeVar Bound? -> TypeParam {cons("TypeParam")}

    "extends" ClassOrInterfaceType IBound? -> Bound {cons("Bound")}
    "&" {InterfaceType "&"}+ -> IBound {cons("InterfacesBound")}

    Id -> TypeVar {cons("TypeVar")}

