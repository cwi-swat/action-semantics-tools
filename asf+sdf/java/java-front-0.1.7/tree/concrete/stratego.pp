[
   "stratego-0" -- _1,
   Overlay -- _1 KW["("] _2 KW[")"] KW["="] _3,
   Overlay.2:iter-star-sep -- _1 KW[","],
   Signature -- V  is = 2[H  [KW["signature"]] _1],
   Signature.1:iter-star -- _1,
   Overlays -- V  [H  [KW["overlays"]] _1],
   Overlays.1:iter-star -- _1,
   Rules -- V  [H  [KW["rules"]] _1],
   Rules.1:iter-star -- _1,
   Strategies -- V  [H  [KW["strategies"]] _1],
   Strategies.1:iter-star -- _1,
   Specification -- V  [H  [KW["specification"]] _1],
   Specification.1:iter-star -- _1,
   Module -- H[KW["module"] _1] _2,
   Module.2:iter-star -- _1,
   BSpec -- _1,
   Imports -- H  [KW["imports"] HV[_1]],
   Imports.1:iter-star -- _1,
   Definition -- V[_1],
   Definition.1:iter-star -- _1,
   Rule -- _1 KW["->"] _2 _3,
   Rule.3:opt -- _1,
   Rule.3:opt.1:seq -- KW["where"] _1,
   StratRule -- _1 KW["-->"] _2 _3,
   StratRule.3:opt -- _1,
   StratRule.3:opt.1:seq -- KW["where"] _1,
   RDef -- _1 _2 KW[":"] _3,
   RDef.2:opt -- _1,
   RDef.2:opt.1:seq -- KW["("] _1 KW[")"],
   RDef.2:opt.1:seq.1:iter-star-sep -- _1 KW[","],
   RDef1 -- _1 _2 KW["::"] _3,
   RDef1.2:opt -- _1,
   RDef1.2:opt.1:seq -- KW["("] _1 KW[")"],
   RDef1.2:opt.1:seq.1:iter-star-sep -- _1 KW[","],
   Signature1 -- V  [H  [KW["signature"]] _1],
   Signature1.1:iter-star -- _1,
   Sorts -- V  [H  [KW["sorts"]] _1],
   Sorts.1:iter-star -- _1,
   Operations -- V  [H  [KW["operations"]] _1],
   Operations.1:iter-star -- _1,
   Constructors -- V  is=2[H  [KW["constructors"]] _1],
   Constructors.1:iter-star -- _1,
   Sort -- _1 _2,
   Sort.2:opt -- _1,
   Sort.2:opt.1:seq -- H hs=0[KW["("] _1 KW[")"]],
   Sort.2:opt.1:seq.1:iter-star-sep -- _1 KW[","],
   OpDecl -- H[_1 KW[":"] _2],
   ConstType -- _1,
   FunType -- _1 KW["->"] _2,
   FunType.1:iter-star-sep -- _1 KW["*"],
   List -- KW["["] _1 KW["]"],
   List.1:iter-star-sep -- _1 KW[","],
   Tuple -- KW["("] _1 KW[")"],
   Tuple.1:iter-star-sep -- _1 KW[","],
   Con -- _1 KW["["] _2 KW["]"] _3,
   Con.3:opt -- _1,
   Con.3:opt.1:seq -- KW["("] _1 KW[")"],
   App -- KW["<"] _1 KW[">"] _2,
   AM -- _1 KW["=>"] _2,
   BA -- KW["<"] _1 KW[">"] _2,
   Strat -- _1,
   SRule -- KW["<<"] _1 KW[">>"],
   Id -- KW["id"],
   Fail -- KW["fail"],
   Test -- KW["test"] KW["("] _1 KW[")"],
   Not -- KW["not"] KW["("] _1 KW[")"],
   Seq -- _1 KW[";"] _2,
   Choice -- _1 KW["+"] _2,
   LChoice -- _1 KW["<+"] _2,
   Rec -- KW["rec"] _1 KW["("] _2 KW[")"],
   StrCong -- _1,
   IntCong -- _1,
   TupleCong -- KW["("] _1 KW[","] _2 KW[")"],
   TupleCong.2:iter-sep -- _1 KW[","],
   ListCong -- KW["["] _1 KW["]"],
   ListCong.1:iter-star-sep -- _1 KW[","],
   Path -- _1 KW["("] _2 KW[")"],
   One -- KW["one"] KW["("] _1 KW[")"],
   Some -- KW["some"] KW["("] _1 KW[")"],
   All -- KW["all"] KW["("] _1 KW[")"],
   Thread -- KW["thread"] KW["("] _1 KW[")"],
   Kids -- KW["kids"],
   Match -- KW["?"] _1,
   Build -- KW["!"] _1,
   Scope -- KW["{"] _1 KW[":"] _2 KW["}"],
   Scope.1:iter-sep -- _1 KW[","],
   Where -- KW["where"] KW["("] _1 KW[")"],
   Let -- KW["let"] _1 KW["in"] _2,
   Call -- _1 _2,
   Call.2:opt -- _1,
   Call.2:opt.1:seq -- KW["("] _1 KW[")"],
   Call.2:opt.1:seq.1:iter-star-sep -- _1 KW[","],
   SVar -- _1,
   SDef -- _1 _2 KW["="] _3,
   SDef.2:opt -- _1,
   SDef.2:opt.1:seq -- KW["("] _1 KW[")"],
   SDef.2:opt.1:seq.1:iter-star-sep -- _1 KW[","],
   Wld -- KW["_"],
   Var -- _1,
   Str -- _1,
   Int -- _1,
   Op -- H hs=0[_1 KW["("] _2 KW[")"]],
   Op.2:iter-star-sep
   --
   _1 KW[","]
]
