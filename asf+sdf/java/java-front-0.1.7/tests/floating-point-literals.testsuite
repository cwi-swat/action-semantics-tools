TestSuite(
  Name("floating-point literals")
, Sort("FloatLiteral")
, ParseTable(File("../grammar/basic/Java.tbl"))
, Tests(
  [ Test(Descr("3.10.2-i1: Whole or fractional part must have a digit"), String(".e2"), Failure())
  , Test(Descr("3.10.2-i2: Whole or fractional part must have a digit"), String(".F"), Failure())
  ])
)

tcltest::test 3.10.2-invalid-3 { Invalid Digits } {
    literal T3102i3 E.1e20
} FAIL

tcltest::test 3.10.2-invalid-4 { ExponentPart must include a SignedInteger } {
    literal T3102i4 1.E
    literal T3102i5 1.e
    literal T3102i6 1.E+
    literal T3102i7 1.E-
    literal T3102i8 .1eF
    literal T3102i9 .1e-D
    literal T3102i10 1e-d
    literal T3102i11 .1e+F
} FAIL

# Error in case of invalid rounding

tcltest::test 3.10.2-round-1 { It is an error for a floating-point
        literal to round to an infinity } {
    literal T3102r1 1e39f
} FAIL

tcltest::test 3.10.2-round-2 { It is an error for a floating-point
        literal to round to an infinity } {
    literal T3102r2 -1e310
} FAIL

tcltest::test 3.10.2-round-3 { It is an error for a nonzero
        floating-point to round to zero } {
    literal T3102r3 1e-47f
} FAIL

tcltest::test 3.10.2-round-4 { It is an error for a nonzero
        floating-point to round to zero } {
    literal T3102r4 -1e-326
} FAIL

tcltest::test 3.10.2-round-5 { It is an error for a floating-point
        literal to round to an infinity } {
    literal T3102r5 340282356779733661637539395458142568448f
} FAIL

tcltest::test 3.10.2-round-6 { It is an error for a floating-point
        literal to round to an infinity } {
    literal T3102r6 179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792.0
} FAIL

tcltest::test 3.10.2-round-7 { It is an error for a nonzero
        floating-point to round to zero } {
    literal T3102r7 0.000000000000000000000000000000000000000000000700649232162408535461864791644958065640130970938257885878534141944895541342930300743319094181060791015625f
} FAIL

tcltest::test 3.10.2-round-8 { It is an error for a nonzero
        floating-point to round to zero } {
    literal T3102r
} FAIL

tcltest::test 3.10.2-round-9 { test rounding at border of float denorms } {
    constant_expression T3102r9 \
            {0.00000000000000000000000000000000000001175494280757364291727882991035766513322858992758990427682963118425003064965173038558532425668090581893920898437499999f == 1.1754942e-38f} \
            {0.000000000000000000000000000000000000011754942807573642917278829910357665133228589927589904276829631184250030649651730385585324256680905818939208984375f == 1.1754944e-38f} \
            {0.00000000000000000000000000000000000001175494280757364291727882991035766513322858992758990427682963118425003064965173038558532425668090581893920898437500001f == 1.1754944e-38f}
} PASS

tcltest::test 3.10.2-round-10 { test rounding at border of double denorms.
        Note that Javac 1.3 enters an infinite loop on this test. } {! javac} {
    constant_expression T3102r10 \
            {0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072011360574097967091319759348195463516456480234261097248222220210769455165295239081350879141491589130396211068700864386945946455276572074078206217433799881410632673292535522868813721490129811224514518898490572223072852551331557550159143974763979834118019993239625482890171070818506906306666559949382757725720157630626906633326475653000092458883164330377797918696120494973903778297049050510806099407302629371289589500035837999672072543043602840788957717961509455167482434710307026091446215722898802581825451803257070188608721131280795122334262883686223215037756666225039825343359745688844239002654981983854879482922068947216898310996983658468140228542433306603398508864458040010349339704275671864433837704860378616227717385456230658746790140867233276367187499999 == 2.225073858507201e-308} \
            {e-308} \
            {e-308}
} PASS

tcltest::test 3.10.2-round-11 { test rounding at largest float where
        Float.MIN_VALUE is 1 ulp } {
    constant_expression T3102r11 \
            {0.00000000000000000000000000000000000002350988491449805367214912435885053862149911421504883761540137648996591935440791942824034777004271745681762695312499999999f == 2.3509884e-38f} \
            {0.00000000000000000000000000000000000002350988491449805367214912435885053862149911421504883761540137648996591935440791942824034777004271745681762695312500000000f == 2.3509884e-38f} \
            {0.00000000000000000000000000000000000002350988491449805367214912435885053862149911421504883761540137648996591935440791942824034777004271745681762695312500000001f == 2.3509886e-38f} \
            {0.00000000000000000000000000000000000002350988631579651799696619528258012191141524549531077949191714824703420324419900211410094925668090581893920898437499999999f == 2.3509886e-38f} \
            {0.00000000000000000000000000000000000002350988631579651799696619528258012191141524549531077949191714824703420324419900211410094925668090581893920898437500000000f == 2.3509887e-38f} \
            {0.00000000000000000000000000000000000002350988631579651799696619528258012191141524549531077949191714824703420324419900211410094925668090581893920898437500000001f == 2.3509887e-38f}
} PASS

tcltest::test 3.10.2-round-12 { test rounding at largest double where
        Double.MIN_VALUE is 1 ulp } {
    constant_expression T3102r12 \
            {e-308} \
            {e-308} \
            {e-308} \
            {0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044501477170144025191476425140415360401540355268139774785767535266120266568349951413708126829206461084782164986440754321120225206002480547543836695927855394428741579816730655978088636997294650082209345461693939556240574324731139358717913147037364055774449896230603026352327326665938919068627384443806161075753898808234874156196451614819777611032358142380042975188038317843029641638497805266254045146423695015437229044481924252633972472775537202836761223314045275532818152963888710721086727474559560291862013573209842350335698170430223195347466466783839664426537070382566775697838267614310656819420077579872544813734533267952182996686996626897593533069381831182603797982290422495647610946820195511813521925831718993954860378616227717385456230658746790140867233276367187499999 == 4.4501477170144023e-308} \
            {e-308} \
            {e-308}
} PASS

# Valid floating-point literals

tcltest::test 3.10.2-float-1 { example float literal } {
    literal T3102f1 1e1f
} PASS

tcltest::test 3.10.2-float-2 { example float literal } {
    literal T3102f2 2.f
} PASS

tcltest::test 3.10.2-float-3 { example float literal } {
    literal T3102f3 1.e-1
} PASS

tcltest::test 3.10.2-float-4 { example float literal } {
    literal T3102f4 .3F
} PASS

tcltest::test 3.10.2-float-5 { example float literal } {
    literal T3102f5 0f
} PASS

tcltest::test 3.10.2-float-6 { example float literal } {
    literal T3102f6 3.14f
} PASS

tcltest::test 3.10.2-float-7 { example float literal } {
    literal T3102f7 6.022137e+23f
} PASS

tcltest::test 3.10.2-float-8 { largest finite float, by JLS } {
    literal T3102f8 3.40282347e+38f
} PASS

tcltest::test 3.10.2-float-9 { smallest finite float } {
    literal T3102f9 1.40239846e-45f
} PASS

tcltest::test 3.10.2-float-10 { extra 0s don't affect floating point parsing } {
    literal T3102f10 000000000000000000000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000e00000000000000000000000000000000050f
} PASS

tcltest::test 3.10.2-float-11 { unicode 1e0F } {
    literal T3102f11 {\u0031\u0065\u0030\u0046}
} PASS

tcltest::test 3.10.2-float-12 { largest finite float, by rounding } {
    constant_expression T3102f12 {340282356779733661637539395458142568447.99999f == Float.MAX_VALUE}
} PASS

tcltest::test 3.10.2-float-13 { smallest finite float, by rounding.
        errors: fail to parse number, round number to zero
        note: We can't compare to Float.MIN_VALUE because
        some stupid JDK versions don't use a constant value } {
    constant_expression T3102f13 {0.00000000000000000000000000000000000000000000070064923216240853546186479164495806564013097093825788587853414194489554134293030074331909418106079101562500001f != 0}
} PASS

tcltest::test 3.10.2-float-14 { valid float overrides invalid octal } {
    constant_expression T3102f14 {08.f == 8} {09.f == 9} \
            {08e0f == 8} {09e0f == 9} \
            {08f == 8} {09f == 9} \
            {08.F == 8} {09.F == 9} \
            {08e0F == 8} {09e0F == 9} \
            {08F == 8} {09F == 9}
} PASS

tcltest::test 3.10.2-float-15 { valid float overrides invalid octal } {
    constant_expression T3102f15 {0180.f == 180} {0190.f == 190} \
            {0180e0f == 180} {0190e0f == 190} \
            {0180f == 180} {0190f == 190} \
            {0180.F == 180} {0190.F == 190} \
            {0180e0F == 180} {0190e0F == 190} \
            {0180F == 180} {0190F == 190}
} PASS

tcltest::test 3.10.2-float-16 { check for 0 followed by letter } {
    constant_expression T3102f16 {0e+0f == 0e-0f} {0E1f == 0} {0f == 0F}
} PASS

tcltest::test 3.10.2-double-1 { example double literal } {
    literal T3102d1 1E1D
} PASS

tcltest::test 3.10.2-double-2 { example double literal } {
    literal T3102d2 2.
} PASS

tcltest::test 3.10.2-double-3 { example double literal } {
    literal T3102d3 .3
} PASS

tcltest::test 3.10.2-double-4 { example double literal } {
    literal T3102d4 0.0
} PASS

tcltest::test 3.10.2-double-5 { example double literal } {
    literal T3102d5 3.14
} PASS

tcltest::test 3.10.2-double-6 { example double literal } {
    literal T3102d6 1e-9d
} PASS

tcltest::test 3.10.2-double-7 { example double literal } {
    literal T3102d7 1e137
} PASS

tcltest::test 3.10.2-double-8 { largest finite double, by JLS } {
    literal T3102d8 1.79769313486231570e+308
} PASS

tcltest::test 3.10.2-double-9 { smallest finite double } {
    literal T3102d9 4.94065645841246544e-324
} PASS
 
tcltest::test 3.10.2-double-10 { the compiler should correctly
        round denormalized literals } {
    constant_expression T3102d10 {.0000000000012345678901234567890e+10 ==
	    1.2345678901234568e-2}
} PASS

tcltest::test 3.10.2-double-11 { extra 0s don't affect floating point parsing } {
    literal T3102d11 000000000000000000000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000e00000000000000000000000000000000050
} PASS

tcltest::test 3.10.2-double-12 { unicode escape the . in float 1.0 } {
    literal T3102d12 1\u002e0
} PASS

tcltest::test 3.10.2-double-13 { largest finite double, by rounding } {
    constant_expression T3102d13 {179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791.999999 == Double.MAX_VALUE}
} PASS

tcltest::test 3.10.2-double-14 { smallest finite double, by rounding
        errors: fail to parse number, round number to zero
        note: We can't compare to Double.MIN_VALUE because
        some stupid JDK versions don't use a constant value } {
    constant_expression T3102d14 {}
} PASS

tcltest::test 3.10.2-double-15 { valid double overrides invalid octal } {
    constant_expression T3102d15 {08. == 8} {09. == 9} \
            {08e0 == 8} {09e0 == 9} \
            {08.d == 8} {09.d == 9} \
            {08e0d == 8} {09e0d == 9} \
            {08d == 8} {09d == 9} \
            {08.D == 8} {09.D == 9} \
            {08e0D == 8} {09e0D == 9} \
            {08D == 8} {09D == 9}
} PASS

tcltest::test 3.10.2-double-16 { valid double overrides invalid octal } {
    constant_expression T3102d16 {0180. == 180} {0190. == 190} \
            {0180e0 == 180} {0190e0 == 190} \
            {0180.d == 180} {0190.d == 190} \
            {0180e0d == 180} {0190e0d == 190} \
            {0180d == 180} {0190d == 190} \
            {0180.D == 180} {0190.D == 190} \
            {0180e0D == 180} {0190e0D == 190} \
            {0180D == 180} {0190D == 190}
} PASS

tcltest::test 3.10.2-double-17 { check for 0 followed by letter } {
    constant_expression T3102d17 {0e+0d == 0e-0d} {0E1 == 0} {0d == 0D}
} PASS


