[ [ Pattern , int , appl ( prod ( [ lit ( "<int>" ) ] , cf ( sort ( "Pattern" ) ) , attrs ( [ term ( cons ( "int" ) ) ] ) ) , [ lit ( "<int>" ) ] ) ] , [ Pattern , aterm , appl ( prod ( [ lit ( "<term>" ) ] , cf ( sort ( "Pattern" ) ) , attrs ( [ term ( cons ( "aterm" ) ) ] ) ) , [ lit ( "<term>" ) ] ) ] , [ Pattern , label , appl ( prod ( [ lit ( "<label>" ) ] , cf ( sort ( "Pattern" ) ) , attrs ( [ term ( cons ( "label" ) ) ] ) ) , [ lit ( "<label>" ) ] ) ] , [ Pattern , code , appl ( prod ( [ lit ( "<code>" ) ] , cf ( sort ( "Pattern" ) ) , attrs ( [ term ( cons ( "code" ) ) ] ) ) , [ lit ( "<code>" ) ] ) ] , [ Signature , with-pattern , appl ( prod ( [ cf ( sort ( "Id" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Pattern" ) ) , cf ( opt ( layout ) ) , lit ( ";" ) ] , cf ( sort ( "Signature" ) ) , attrs ( [ term ( cons ( "with-pattern" ) ) ] ) ) , [ < name ( Id ) > , < ws-after-name ( Layout ) > , < pattern ( Pattern ) > , < ws-after-pattern ( Layout ) > , lit ( ";" ) ] ) ] , [ Signature , without-pattern , appl ( prod ( [ cf ( sort ( "Id" ) ) , cf ( opt ( layout ) ) , lit ( ";" ) ] , cf ( sort ( "Signature" ) ) , attrs ( [ term ( cons ( "without-pattern" ) ) ] ) ) , [ < name ( Id ) > , < ws-after-name ( Layout ) > , lit ( ";" ) ] ) ] , [ Definition , Default , appl ( prod ( [ lit ( "definition" ) , cf ( opt ( layout ) ) , cf ( sort ( "Id" ) ) , cf ( opt ( layout ) ) , lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Signature" ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Definition" ) ) , no-attrs ) , [ lit ( "definition" ) , < "ws-after-definition" ( Layout ) > , < id ( Id ) > , < ws-after-id ( Layout ) > , lit ( "{" ) , < "ws-after-{" ( Layout ) > , appl ( list ( cf ( iter-star ( sort ( "Signature" ) ) ) ) , < list ( Signature-list ) > ) , < ws-after-list ( Layout ) > , lit ( "}" ) ] ) ] , [ Signature-list , empty , [  ] ] , [ Signature-list , single , [ < head ( Signature ) > ] ] , [ Signature-list , many , [ < head ( Signature ) > , < ws-after-first ( Layout ) > , < [ tail ( Signature-list ) ] > ] ] , [ Instruction , without-arg , appl ( prod ( [ cf ( sort ( "Id" ) ) ] , cf ( sort ( "Instruction" ) ) , attrs ( [ term ( cons ( "without-arg" ) ) ] ) ) , [ < id ( Id ) > ] ) ] , [ Instruction , with-arg , appl ( prod ( [ cf ( sort ( "Id" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Arg" ) ) ] , cf ( sort ( "Instruction" ) ) , attrs ( [ term ( cons ( "with-arg" ) ) ] ) ) , [ < id ( Id ) > , < ws-after-id ( Layout ) > , < argument ( Arg ) > ] ) ] , [ Statement , label-def , appl ( prod ( [ cf ( sort ( "Label" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) ] , cf ( sort ( "Statement" ) ) , attrs ( [ term ( cons ( "label-def" ) ) ] ) ) , [ < lab ( Label ) > , < ws-after-lab ( Layout ) > , lit ( ":" ) ] ) ] , [ Statement , instruction , appl ( prod ( [ cf ( sort ( "Instruction" ) ) , cf ( opt ( layout ) ) , lit ( ";" ) ] , cf ( sort ( "Statement" ) ) , attrs ( [ term ( cons ( "instruction" ) ) ] ) ) , [ < instruction ( Instruction ) > , < ws-after-instruction ( Layout ) > , lit ( ";" ) ] ) ] , [ Arg , number , appl ( prod ( [ cf ( sort ( "Number" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "number" ) ) , prefer ] ) ) , [ < number ( Number ) > ] ) ] , [ Arg , code , appl ( prod ( [ cf ( sort ( "Program" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "code" ) ) ] ) ) , [ < code ( Program ) > ] ) ] , [ Arg , aterm , appl ( prod ( [ cf ( sort ( "ATerm" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "aterm" ) ) ] ) ) , [ < term ( ATerm ) > ] ) ] , [ Arg , label , appl ( prod ( [ cf ( sort ( "Label" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "label" ) ) ] ) ) , [ < label ( Label ) > ] ) ] , [ Program , program , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Statement" ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Program" ) ) , attrs ( [ term ( cons ( "program" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( Layout ) > , appl ( list ( cf ( iter-star ( sort ( "Statement" ) ) ) ) , < list ( Statement-list ) > ) , < ws-after-list ( Layout ) > , lit ( "}" ) ] ) ] , [ Statement-list , empty , [  ] ] , [ Statement-list , single , [ < head ( Statement ) > ] ] , [ Statement-list , many , [ < head ( Statement ) > , < ws-after-first ( Layout ) > , < [ tail ( Statement-list ) ] > ] ] ]