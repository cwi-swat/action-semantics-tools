%%%
%%% SDF grammar for the language "c".
%%%
%%% This grammar is part of the Grammar Base which is located at
%%%      http://www.program-transformation.org/gb/
%%% 
%%%  Grammar: c
%%%  Version: 0
%%% Maturity: Volatile
%%%
%%% Description:
%%%  imperative programming language

definition

module AbstractDeclarators
exports
  context-free syntax
    "*" TypeQualifier* -> Pointer {cons("PointerOf")}
    Pointer+ -> Pointers {cons("Pointer-p")}
    Pointer* -> PointersOpt {cons("Pointer-s")}

  context-free syntax
    UnaryAbstractDeclarator -> AbstractDeclarator {cons("UnaryAbstractDeclarator")}
    PostfixAbstractDeclarator -> AbstractDeclarator {cons("PostfixAbstractDeclarator")}
    PostfixingAbstractDeclarator -> AbstractDeclarator {cons("PostfixingAbstractDeclarator")}

  context-free syntax
    Pointers ( PostfixAbstractDeclarator | PostfixingAbstractDeclarator )? -> UnaryAbstractDeclarator {cons("Pointer")}

  context-free syntax
    ArrayAbstractDeclarator -> PostfixingAbstractDeclarator {cons("ArrayAbstractDeclarator")}
    "(" {ParameterDeclaration ","}+ "," "..." ")" -> PostfixingAbstractDeclarator {cons("ParamListVarArgs")}
    "(" {ParameterDeclaration ","}* ")" -> PostfixingAbstractDeclarator {cons("ParamList")}

  context-free syntax
    ArrayAbstractDeclarator? "[" ConstantExpression? "]" -> ArrayAbstractDeclarator {cons("ArrayDecl")}

  context-free syntax
    "(" UnaryAbstractDeclarator ")" -> PostfixAbstractDeclarator {cons("DeclBracket")}
    "(" PostfixAbstractDeclarator ")" -> PostfixAbstractDeclarator {cons("DeclBracket1")}
    "(" PostfixingAbstractDeclarator ")" -> PostfixAbstractDeclarator {cons("DeclBracket2")}
    "(" UnaryAbstractDeclarator ")" PostfixingAbstractDeclarator -> PostfixAbstractDeclarator {cons("FunType")}

module ParameterDeclarators
exports
  context-free syntax
    ( DeclarationQualifierList | TypeQualifier+ | DeclarationSpecifier | TypeSpecifier ) ( AbstractDeclarator | IdentifierDeclarator )? -> ParameterDeclaration {cons("ParamDecl")}
    ( DeclarationSpecifier | TypeSpecifier ) TypedefDeclarator -> ParameterDeclaration {cons("ParamDecl2")}

  context-free syntax
    ( TypeSpecifier | TypeQualifier+ ) AbstractDeclarator? -> TypeName {cons("TypeName")}

module Enumerators
exports
  context-free syntax
    "enum" IdentifierOrTypedefName? "{" {Enumerator ","}+ "}" -> EnumSpecifier {cons("Enum")}
    "enum" IdentifierOrTypedefName -> EnumSpecifier {cons("EnumId")}

  context-free syntax
    IdentifierOrTypedefName EnumeratorValue? -> Enumerator {cons("Enumerator")}

  context-free syntax
    "=" ConstantExpression -> EnumeratorValue {cons("EnumVal")}

module StructsAndUnions
exports
  context-free syntax
    StructSpecifier -> ElaboratedTypeName {cons("StructSpecifier")}
    UnionSpecifier -> ElaboratedTypeName {cons("UnionSpecifier")}
    EnumSpecifier -> ElaboratedTypeName {cons("EnumSpecifier")}

  context-free syntax
    "struct" IdentifierOrTypedefName? "{" MemberDeclaration+ "}" -> StructSpecifier {cons("Struct")}
    "struct" IdentifierOrTypedefName -> StructSpecifier {cons("StructId")}

  context-free syntax
    "union" IdentifierOrTypedefName? "{" MemberDeclaration+ "}" -> UnionSpecifier {cons("Union")}
    "union" IdentifierOrTypedefName -> UnionSpecifier {cons("UnionId")}

  context-free syntax
    TypeSpecifier {MemberDeclarator ","}+ ";" -> MemberDeclaration {cons("MemDecl")}
    TypeQualifier+ {MemberIdentifierDeclarator ","}+ ";" -> MemberDeclaration {cons("MemDecl1")}

  context-free syntax
    Declarator -> MemberDeclarator {cons("Declarator")}
    Declarator? ":" ConstantExpression -> MemberDeclarator {cons("BitFieldSize")}

module Expressions
exports
  context-free syntax
    INTEGERconstant -> Constant {cons("IntConst")}
    FLOATINGconstant -> Constant {cons("FloatConst")}
    OCTALconstant -> Constant {cons("OctConst")}
    HEXconstant -> Constant {cons("HexConst")}
    CHARACTERconstant -> Constant {cons("CharConst")}

  context-free syntax
    STRINGliteral+ -> StringLiteralList {cons("StringLit")}

  context-free syntax
    IDENTIFIER -> PrimaryExpression {cons("IDENTIFIER")}
    Constant -> PrimaryExpression {cons("Constant")}
    StringLiteralList -> PrimaryExpression {cons("StringLiteralList")}
    "(" CommaExpression ")" -> PrimaryExpression {bracket}

  context-free syntax
    PrimaryExpression -> PostfixExpression {cons("PrimaryExpression")}
    PostfixExpression "[" CommaExpression "]" -> PostfixExpression {cons("ArrayIndex")}
    PostfixExpression "(" ArgumentExpressionList ")" -> PostfixExpression {cons("FunCall")}
    PostfixExpression "." MemberName -> PostfixExpression {cons("Field")}
    PostfixExpression "->" MemberName -> PostfixExpression {cons("DerefMember")}
    PostfixExpression "++" -> PostfixExpression {cons("PostIncr")}
    PostfixExpression "--" -> PostfixExpression {cons("PostDecr")}

  context-free syntax
    IDENTIFIER -> MemberName {cons("IDENTIFIER1")}
    TypedefName -> MemberName {cons("TypedefName")}

  context-free syntax
    {AssignmentExpression ","}* -> ArgumentExpressionList {cons("comma")}

  context-free syntax
    PostfixExpression -> UnaryExpression {cons("PostfixExpression")}
    "++" UnaryExpression -> UnaryExpression {cons("PreIncr")}
    "--" UnaryExpression -> UnaryExpression {cons("PreDecr")}
    "sizeof" UnaryExpression -> UnaryExpression {cons("SizeofExp")}
    "sizeof" "(" TypeName ")" -> UnaryExpression {cons("SizeofType")}
    "&" CastExpression -> UnaryExpression {cons("Address")}
    "*" CastExpression -> UnaryExpression {cons("Deref")}
    "+" CastExpression -> UnaryExpression {cons("Positive")}
    "-" CastExpression -> UnaryExpression {cons("Negative")}
    "~" CastExpression -> UnaryExpression {cons("Tilde")}
    "!" CastExpression -> UnaryExpression {cons("Negation")}

  context-free syntax
    UnaryExpression -> CastExpression {cons("UnaryExpression")}
    "(" TypeName ")" CastExpression -> CastExpression {cons("TypeCast")}

  context-free syntax
    CastExpression -> MultiplicativeExpression {cons("CastExpression")}
    MultiplicativeExpression "*" CastExpression -> MultiplicativeExpression {cons("Mul")}
    MultiplicativeExpression "/" CastExpression -> MultiplicativeExpression {cons("Div")}
    MultiplicativeExpression "%" CastExpression -> MultiplicativeExpression {cons("Mod")}

  context-free syntax
    MultiplicativeExpression -> AdditiveExpression {cons("MultiplicativeExpression")}
    AdditiveExpression "+" MultiplicativeExpression -> AdditiveExpression {cons("Add")}
    AdditiveExpression "-" MultiplicativeExpression -> AdditiveExpression {cons("Subt")}

  context-free syntax
    AdditiveExpression -> ShiftExpression {cons("AdditiveExpression")}
    ShiftExpression "<<" AdditiveExpression -> ShiftExpression {cons("ShiftLeft")}
    ShiftExpression ">>" AdditiveExpression -> ShiftExpression {cons("ShiftRight")}

  context-free syntax
    ShiftExpression -> RelationalExpression {cons("ShiftExpression")}
    RelationalExpression "<" ShiftExpression -> RelationalExpression {cons("Lt")}
    RelationalExpression ">" ShiftExpression -> RelationalExpression {cons("Gt")}
    RelationalExpression "<=" ShiftExpression -> RelationalExpression {cons("Le")}
    RelationalExpression ">=" ShiftExpression -> RelationalExpression {cons("Ge")}

  context-free syntax
    RelationalExpression -> EqualityExpression {cons("RelationalExpression")}
    EqualityExpression "==" RelationalExpression -> EqualityExpression {cons("Equal")}
    EqualityExpression "!=" RelationalExpression -> EqualityExpression {cons("NotEqual")}

  context-free syntax
    EqualityExpression -> ANDexpression {cons("EqualityExpression")}
    EqualityExpression "&" ANDexpression -> ANDexpression {cons("And")}

  context-free syntax
    ANDexpression -> ExclusiveORExpression {cons("ANDexpression")}
    ANDexpression "^" ExclusiveORExpression -> ExclusiveORExpression {cons("ExOr")}

  context-free syntax
    ExclusiveORExpression -> InclusiveORExpression {cons("ExclusiveORExpression")}
    ExclusiveORExpression "|" InclusiveORExpression -> InclusiveORExpression {cons("IncOr")}

  context-free syntax
    InclusiveORExpression -> LogicalANDExpression {cons("InclusiveORExpression")}
    LogicalANDExpression "&&" InclusiveORExpression -> LogicalANDExpression {cons("LAnd")}

  context-free syntax
    LogicalANDExpression -> LogicalORExpression {cons("LogicalANDExpression")}
    LogicalORExpression "||" LogicalANDExpression -> LogicalORExpression {cons("LOr")}

  context-free syntax
    LogicalORExpression -> ConditionalExpression {cons("LogicalORExpression")}
    LogicalORExpression "?" CommaExpression ":" ConditionalExpression -> ConditionalExpression {cons("IfExp")}

  context-free syntax
    ConditionalExpression -> AssignmentExpression {cons("ConditionalExpression")}
    UnaryExpression AssignmentOperator AssignmentExpression -> AssignmentExpression {cons("Assign")}

  context-free syntax
    "=" -> AssignmentOperator {cons("AssignEq")}
    "*=" -> AssignmentOperator {cons("AssignMul")}
    "/=" -> AssignmentOperator {cons("AssignDiv")}
    "%=" -> AssignmentOperator {cons("AssignMod")}
    "+=" -> AssignmentOperator {cons("AssignPlus")}
    "-=" -> AssignmentOperator {cons("AssignMin")}
    "<<=" -> AssignmentOperator {cons("AssignSL")}
    ">>=" -> AssignmentOperator {cons("AssignSR")}
    "&=" -> AssignmentOperator {cons("AssignAnd")}
    "^=" -> AssignmentOperator {cons("AssignExp")}
    "|=" -> AssignmentOperator {cons("AssignOr")}

  context-free syntax
    AssignmentExpression -> CommaExpression {cons("AssignmentExpression")}
    AssignmentExpression "," CommaExpression -> CommaExpression {cons("Comma")}
     -> CommaExpressionOpt {cons("EmptyExp")}
    CommaExpression -> CommaExpressionOpt {cons("CommaExpression")}

  context-free syntax
    ConditionalExpression -> ConstantExpression {cons("ConditionalExpression1")}

module Types
exports
  context-free syntax
    "typedef" -> StorageClass {cons("Typedef")}
    "extern" -> StorageClass {cons("Extern")}
    "static" -> StorageClass {cons("Static")}
    "auto" -> StorageClass {cons("Auto")}
    "register" -> StorageClass {cons("Register")}

  context-free syntax
    "int" -> BasicTypeName {cons("Int")}
    "char" -> BasicTypeName {cons("Char")}
    "short" -> BasicTypeName {cons("Short")}
    "long" -> BasicTypeName {cons("Long")}
    "float" -> BasicTypeName {cons("Float")}
    "double" -> BasicTypeName {cons("Double")}
    "signed" -> BasicTypeName {cons("Signed")}
    "unsigned" -> BasicTypeName {cons("Unsigned")}
    "void" -> BasicTypeName {cons("Void")}

  context-free syntax
    "const" -> TypeQualifier {cons("Const")}
    "volatile" -> TypeQualifier {cons("Volatile")}

  context-free syntax
    ( DeclarationQualifierList | TypeQualifier+ ) {IdDecl ","}* ";" -> Declaration {cons("Declaration")}
    ( DeclarationSpecifier | TypeSpecifier ) {VarDecl ","}* ";" -> Declaration {cons("Declaration2")}

  context-free syntax
    IdentifierDeclarator -> IdDecl {cons("IdentifierDeclarator")}
    IdentifierDeclarator "=" Initializer -> IdDecl {cons("IdDeclInit")}
    Declarator -> VarDecl {cons("Declarator1")}
    Declarator "=" Initializer -> VarDecl {cons("DeclInit")}
    "{" {Initializer ","}+ "}" -> Initializer {cons("ArrayInit")}
    "{" {Initializer ","}+ "," "}" -> Initializer {cons("ArrayInitIncomplete")}
    AssignmentExpression -> Initializer {cons("AssignInit")}

  context-free syntax
    TypeQualifier* ( BasicTypeName | ElaboratedTypeName | TypedefName ) ( TypeQualifier | BasicTypeName )* -> TypeSpecifier {cons("TypeSpec")}

  context-free syntax
    StorageClass -> DeclarationQualifier {cons("StorageClass")}
    TypeQualifier -> DeclarationQualifier {cons("TypeQualifier")}

  context-free syntax
    TypeQualifier* StorageClass DeclarationQualifier* -> DeclarationQualifierList {cons("DQualifiers")}

  context-free syntax
    TypeQualifier* StorageClass DeclarationQualifier* ( BasicTypeName | ElaboratedTypeName | TypedefName ) ( DeclarationQualifier | BasicTypeName )* -> DeclarationSpecifier {cons("DeclSpec")}

module Identifiers
exports
  lexical syntax
    [a-zA-Z\_] [a-zA-Z\_0-9]* -> ID

  lexical restrictions
    ID -/- [a-zA-Z\_0-9]

  context-free syntax
    ID -> IDENTIFIER {cons("Id")}
    ID -> TypedefName {cons("TypeId"), avoid}
    IDENTIFIER -> IdentifierOrTypedefName {cons("IDENTIFIER2")}
    TypedefName -> IdentifierOrTypedefName {cons("TypedefName1")}

module Statements
exports
  context-free syntax
    LabeledStatement -> Statement {cons("LabeledStatement")}
    CompoundStatement -> Statement {cons("CompoundStatement")}
    ExpressionStatement -> Statement {cons("ExpressionStatement")}
    SelectionStatement -> Statement {cons("SelectionStatement")}
    IterationStatement -> Statement {cons("IterationStatement")}
    JumpStatement -> Statement {cons("JumpStatement")}

  context-free syntax
    IdentifierOrTypedefName ":" Statement -> LabeledStatement {cons("Label")}
    "case" ConstantExpression ":" Statement -> LabeledStatement {cons("Case")}
    "default" ":" Statement -> LabeledStatement {cons("Default")}

  context-free syntax
    "{" Declaration* Statement* "}" -> CompoundStatement {cons("Compound")}

  context-free syntax
    CommaExpressionOpt ";" -> ExpressionStatement {cons("Stat")}

  context-free syntax
    "if" "(" CommaExpression ")" Statement -> SelectionStatement {cons("If")}
    "if" "(" CommaExpression ")" Statement "else" Statement -> SelectionStatement {cons("IfElse")}
    "switch" "(" CommaExpression ")" Statement -> SelectionStatement {cons("Switch")}

  context-free syntax
    "while" "(" CommaExpression ")" Statement -> IterationStatement {cons("While")}
    "do" Statement "while" "(" CommaExpression ")" ";" -> IterationStatement {cons("DoWhile")}
    "for" "(" CommaExpressionOpt ";" CommaExpressionOpt ";" CommaExpressionOpt ")" Statement -> IterationStatement {cons("For")}

  context-free syntax
    "goto" IdentifierOrTypedefName ";" -> JumpStatement {cons("Goto")}
    "continue" ";" -> JumpStatement {cons("Continue")}
    "break" ";" -> JumpStatement {cons("Break")}
    "return" CommaExpressionOpt ";" -> JumpStatement {cons("Return")}
    "exit" CommaExpressionOpt ";" -> JumpStatement {cons("Exit")}

module Program
exports
  sorts TranslationUnit

  context-free syntax
    ExternalDefinition+ -> TranslationUnit {cons("ExternalDefinition-p")}

  context-free syntax
    FunctionDefinition -> ExternalDefinition {cons("FunctionDefinition")}
    Declaration -> ExternalDefinition {cons("Declaration1")}

  context-free syntax
    ( NoTypeSpecifier | DeclarationSpecifier | TypeSpecifier | DeclarationQualifierList | TypeQualifier+ ) ( IdentifierDeclarator | ( OldFunctionDeclarator Declaration* ) ) CompoundStatement -> FunctionDefinition {cons("FunDef")}

  context-free syntax
     -> NoTypeSpecifier {cons("NoTypeSpecifier")}

module Declarators
exports
  context-free syntax
    IdentifierDeclarator -> Declarator {cons("IdentifierDeclarator1")}
    TypedefDeclarator -> Declarator {cons("TypedefDeclarator")}

  context-free syntax
    PointersOpt IDENTIFIER PostfixingAbstractDeclarator? -> IdentifierDeclarator {cons("IdDecl")}
    PointersOpt "(" IdentifierDeclarator ")" PostfixingAbstractDeclarator? -> IdentifierDeclarator {cons("FunDecl")}

  context-free syntax
    PointersOpt TypedefName PostfixingAbstractDeclarator? -> TypedefDeclarator {cons("TypedefDeclarator1")}
    PointersOpt "(" TypedefDeclarator ")" PostfixingAbstractDeclarator? -> TypedefDeclarator {cons("TypedefDeclarator2")}

  context-free syntax
    PointersOpt ParenIdentifierDeclarator "(" {IDENTIFIER ","}+ ")" -> OldFunctionDeclarator {cons("OldFunction1")}
    PointersOpt "(" OldFunctionDeclarator ")" PostfixingAbstractDeclarator? -> OldFunctionDeclarator {cons("OldFunction2")}
    IDENTIFIER -> ParenIdentifierDeclarator {cons("IDENTIFIER3")}
    "(" ParenIdentifierDeclarator ")" -> ParenIdentifierDeclarator {bracket}

module Preprocessor
exports
  lexical syntax
    ~[\ \t\n\/] -> TokenChar
    [\/] -> Slash
    Slash -> TokenChar
    TokenChar+ -> Token
    ( [\ \t] | ( [\\] [\n] ) | Comment )+ -> TokWS
    ( [\ \t] | Comment )* -> WS
    {Token TokWS}+ -> TokenSeq
    ~[\"\ \t\n\>]+ -> FileName

  lexical restrictions
    Slash -/- [\*]
    Token -/- ~[\ \t\n\/]
    TokenSeq -/- ~[\ \t\n]
    WS -/- [\ \t]

  lexical syntax
    "#" WS "define" WS ID WS ( "(" WS {( ID WS ) ( "," WS )}* ")" WS )? TokenSeq? WS [\n] -> ControlLine

  lexical syntax
    "#" WS "undef" WS ID WS [\n] -> ControlLine
    "#" WS "include" WS "<" FileName ">" WS [\n] -> ControlLine
    "#" WS "include" WS "\"" FileName "\"" WS [\n] -> ControlLine
    "#" WS "include" WS TokenSeq WS [\n] -> ControlLineNot
    "#" WS "line" WS [0-9]+ WS ( "\"" WS FileName WS "\"" )? WS [\n] -> ControlLine
    "#" WS Constant ( "\"" WS FileName WS "\"" )? WS [\n] -> ControlLine
    "#" WS "error" WS TokenSeq? WS [\n] -> ControlLine
    "#" WS "pragma" WS TokenSeq? WS [\n] -> ControlLine
    "#" WS "if" WS ConstantExpression WS [\n] -> IfLine
    "#" WS "if" WS ID WS [\n] -> IfLine
    "#" WS "if" WS ID WS "!=" WS [0-9]+ WS [\n] -> IfLine
    "#" WS "ifdef" WS ID WS [\n] -> IfLine
    "#" WS "ifndef" WS ID WS [\n] -> IfLine
    "#" WS "elif" WS ConstantExpression WS [\n] -> ElifLine
    "#" WS "else" WS [\n] -> ElseLine

  context-free syntax
    ControlLine -> ExternalDefinition {cons("ControlLine")}
    ControlLine -> MemberDeclaration {cons("ControlLine1")}

  context-free syntax
    IfLine ExternalDefinition* ( ElifLine ExternalDefinition* )* ( ElseLine ExternalDefinition* )? "#" "endif" -> ExternalDefinition {cons("PpIf")}

module Lexical
exports
  lexical syntax
    [\ \t\n] -> LAYOUT
    "/*" ( ~[\*] | Asterisk )* "*/" -> Comment
    Comment -> LAYOUT
    [\*] -> Asterisk
    "//" ~[\n]* [\n] -> Comment

  lexical restrictions
    Asterisk -/- [\/]

  context-free restrictions
    LAYOUT? -/- [\ \t\n]

module Constants
exports
  lexical syntax
    [L]? "\"" StringChar* "\"" -> STRINGliteral
    ~[\\\"\n] -> StringChar
    [\\] [ntvbrfa\\\?\"] -> StringChar
    [\\] [x] [0-9A-E] [0-9A-E] -> StringChar
    Octal -> StringChar
    [\\] [0-7] [0-7]? [0-7]? -> Octal

  lexical syntax
    "." [0-9]+ ( [eE] "-"? [0-9]+ )? [fFlL]? -> FLOATINGconstant
    [0-9]+ "." [0-9]* ( [eE] "-"? [0-9]+ )? [fFlL]? -> FLOATINGconstant
    [0-9]+ [eE] "-"? [0-9]+ [fFlL]? -> FLOATINGconstant
    [0-9]+ -> INTEGERconstant
    [L]? "'" Char "'" -> CHARACTERconstant
    ~[\\\'\n] -> Char
    [\\] [ntvbrfa\\\?\'\"] -> Char
    Octal -> Char
    [\\] [x] [0-9A-E] [0-9A-E] -> Char

  lexical syntax
    "0" [xX] [0-9]+ -> HEXconstant

  lexical restrictions
    INTEGERconstant HEXconstant FLOATINGconstant -/- [0-9]

module Keywords
exports
  context-free syntax
    "return" -> RETURN {cons("return")}
    "exit" -> RETURN {cons("exit")}

  context-free syntax
    "auto" -> IDENTIFIER {reject}
    "double" -> IDENTIFIER {reject}
    "int" -> IDENTIFIER {reject}
    "struct" -> IDENTIFIER {reject}
    "break" -> IDENTIFIER {reject}
    "else" -> IDENTIFIER {reject}
    "long" -> IDENTIFIER {reject}
    "switch" -> IDENTIFIER {reject}
    "case" -> IDENTIFIER {reject}
    "enum" -> IDENTIFIER {reject}
    "register" -> IDENTIFIER {reject}
    "typedef" -> IDENTIFIER {reject}
    "char" -> IDENTIFIER {reject}
    "extern" -> IDENTIFIER {reject}
    "return" -> IDENTIFIER {reject}
    "exit" -> IDENTIFIER {reject}
    "union" -> IDENTIFIER {reject}
    "const" -> IDENTIFIER {reject}
    "float" -> IDENTIFIER {reject}
    "short" -> IDENTIFIER {reject}
    "unsigned" -> IDENTIFIER {reject}
    "continue" -> IDENTIFIER {reject}
    "for" -> IDENTIFIER {reject}
    "signed" -> IDENTIFIER {reject}
    "void" -> IDENTIFIER {reject}
    "default" -> IDENTIFIER {reject}
    "goto" -> IDENTIFIER {reject}
    "sizeof" -> IDENTIFIER {reject}
    "volatile" -> IDENTIFIER {reject}
    "do" -> IDENTIFIER {reject}
    "if" -> IDENTIFIER {reject}
    "static" -> IDENTIFIER {reject}
    "while" -> IDENTIFIER {reject}

module C
imports Keywords Constants Lexical Preprocessor Declarators Program Statements Identifiers Types Expressions StructsAndUnions Enumerators ParameterDeclarators AbstractDeclarators

module Main
imports C

module GB-Main
imports Main

exports
  syntax
    <START> -> SURROGATE-START {cons("\"c-0\"")}
    SURROGATE-START [\256] -> <Start> {prefer, cons("SURROGATE-START")}
