module c/Preprocessor
exports
  lexical syntax
    ~[\ \t\n\/] -> TokenChar
    [\/] -> Slash
    Slash -> TokenChar
    TokenChar+ -> Token
    ( [\ \t] | ( [\\] [\n] ) | Comment )+ -> TokWS
    ( [\ \t] | Comment )* -> WS
    {Token TokWS}+ -> TokenSeq {avoid}
    ~[\"\ \t\n\>]+ -> FileName

  lexical restrictions
    Slash -/- [\*]
    Token -/- ~[\ \t\n\/]
    TokenSeq -/- ~[\ \t\n]
    WS -/- [\ \t]

  lexical syntax
    "#" WS "define" WS ID WS ( "(" WS {( ID WS ) ( "," WS )}* ")" WS )? TokenSeq? WS [\n] -> ControlLine {avoid}

  lexical syntax
    "#" WS "undef" WS ID WS [\n] -> ControlLine {avoid}
    "#" WS "include" WS "<" FileName ">" WS [\n] -> ControlLine {avoid}
    "#" WS "include" WS "\"" FileName "\"" WS [\n] -> ControlLine {avoid}
    "#" WS "include" WS TokenSeq WS [\n] -> ControlLineNot {avoid}
    "#" WS "line" WS [0-9]+ WS ( "\"" WS FileName WS "\"" )? WS [\n] -> ControlLine {avoid}
    "#" WS Constant ( "\"" WS FileName WS "\"" )? WS [\n] -> ControlLine {avoid}
    "#" WS "error" WS TokenSeq? WS [\n] -> ControlLine {avoid}
    "#" WS "pragma" WS TokenSeq? WS [\n] -> ControlLine {avoid}
    "#" WS "if" WS ConstantExpression WS [\n] -> IfLine {avoid}
    "#" WS "if" WS ID WS [\n] -> IfLine {avoid}
    "#" WS "if" WS ID WS "!=" WS [0-9]+ WS [\n] -> IfLine {avoid}
    "#" WS "ifdef" WS ID WS [\n] -> IfLine {avoid}
    "#" WS "ifndef" WS ID WS [\n] -> IfLine {avoid}
    "#" WS "elif" WS ConstantExpression WS [\n] -> ElifLine {avoid}
    "#" WS "else" WS [\n] -> ElseLine {avoid}

  context-free syntax
    ControlLine -> ExternalDefinition {cons("ControlLine")}
    ControlLine -> MemberDeclaration {cons("ControlLine1")}

  context-free syntax
    IfLine ExternalDefinition* ( ElifLine ExternalDefinition* )* ( ElseLine ExternalDefinition* )? "#" "endif" -> ExternalDefinition {cons("PpIf")}

