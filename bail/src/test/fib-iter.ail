{
		scope;
		push;
		copy;
		copy;
		publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("n");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		push;
		copy;
		prov int(1);
		publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("i");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		push;
		copy;
		prov int(0);
		publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("j");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		push;
		copy;
		prov int(0);
		publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("k");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		d_union;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		d_union;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		d_union;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		override;
		unpublish;
		cast bindings(<term>);
		enter;
		trye @l12;
			frame @l111;
	@l110: 	scope;
		push;
		copy;
		prov token("k");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("n");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		merge;
		publish;
		tryf @l110002;
			cast [<term>,<list>];
		component 1;
		publish;
		cast int(<term>);
		unpublish;
		push;
		copy;
		cast [<term>,<list>];
		component 2;
		publish;
		cast int(<term>);
		unpublish;
		merge;
		publish;
		trye @l1100010011;
			cast [int(<term>),int(<term>)];
		lt;
		catch @l1100010012;
	@l1100010011:		epublish;
			fail;
			unpublish;
	@l1100010012:
		push;
		copy;
		copy;
		merge;
		unpublish;
		publish;
		prov bool(1);
		unpublish;
		catch @l110003;
	@l110002:		copy;
			prov bool(0);
	@l110003:
		unpublish;
		publish;
		tryf @l11002;
			tryf @l110011;
			cast <term>;
		publish;
		cast <term>;
		tupleToList;
		unpublish;
		push;
		copy;
		prov bool(1);
		publish;
		cast <term>;
		tupleToList;
		unpublish;
		merge;
		publish;
		trye @l11001000011;
			cast [<appl(<term>)>,<appl(<term>)>];
		eq;
		catch @l11001000012;
	@l11001000011:		epublish;
			fail;
			unpublish;
	@l11001000012:
		push;
		copy;
		copy;
		merge;
		unpublish;
		publish;
		scope;
		push;
		copy;
		prov token("j");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("i");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("j");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		merge;
		publish;
		cast [<term>,<list>];
		component 1;
		publish;
		cast int(<term>);
		unpublish;
		push;
		copy;
		cast [<term>,<list>];
		component 2;
		publish;
		cast int(<term>);
		unpublish;
		merge;
		publish;
		cast [int(<term>),int(<term>)];
		add;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [cell(<term>),<appl(<term>)>];
		update;
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("i");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("j");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("i");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		merge;
		publish;
		cast [<term>,<list>];
		component 1;
		publish;
		cast int(<term>);
		unpublish;
		push;
		copy;
		cast [<term>,<list>];
		component 2;
		publish;
		cast int(<term>);
		unpublish;
		merge;
		publish;
		cast [int(<term>),int(<term>)];
		sub;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [cell(<term>),<appl(<term>)>];
		update;
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("k");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		push;
		copy;
		scope;
		push;
		copy;
		prov token("k");
		merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish;
		publish;
		cast cell(<term>);
		unpublish;
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push;
		copy;
		prov int(1);
		merge;
		publish;
		cast [<term>,<list>];
		component 1;
		publish;
		cast int(<term>);
		unpublish;
		push;
		copy;
		cast [<term>,<list>];
		component 2;
		publish;
		cast int(<term>);
		unpublish;
		merge;
		publish;
		cast [int(<term>),int(<term>)];
		add;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [cell(<term>),<appl(<term>)>];
		update;
		unpublish;
		merge;
		merge;
		unpublish;
		push;
		copy;
		frame @l11001001;
		goto @l110;
	@l11001001:
		merge;
		catch @l110012;
	@l110011:		copy;
			cast <term>;
		publish;
		cast <term>;
		tupleToList;
		unpublish;
		push;
		copy;
		prov bool(0);
		publish;
		cast <term>;
		tupleToList;
		unpublish;
		merge;
		publish;
		trye @l1100101011;
			cast [<appl(<term>)>,<appl(<term>)>];
		eq;
		catch @l1100101012;
	@l1100101011:		epublish;
			fail;
			unpublish;
	@l1100101012:
		push;
		copy;
		copy;
		merge;
		unpublish;
		publish;
		prov [];
		unpublish;
	@l110012:
		catch @l11003;
	@l11002:		copy;
			prov [];
		publish;
		raise;
		unpublish;
	@l11003:
		unpublish;
		return;
	@l111:
		catch @l13;
	@l12:		epublish;
			tryf @l112;
			cast <term>;
		publish;
		cast <term>;
		tupleToList;
		unpublish;
		push;
		copy;
		prov token("break");
		publish;
		cast <term>;
		tupleToList;
		unpublish;
		merge;
		publish;
		trye @l1110011;
			cast [<appl(<term>)>,<appl(<term>)>];
		eq;
		catch @l1110012;
	@l1110011:		epublish;
			fail;
			unpublish;
	@l1110012:
		push;
		copy;
		copy;
		merge;
		unpublish;
		publish;
		prov [];
		unpublish;
		catch @l113;
	@l112:		copy;
			raise;
	@l113:
			unpublish;
	@l13:
		leave;
		return;
	}