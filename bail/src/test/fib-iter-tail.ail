{
		scope;
		push; copy; publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("n");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		push; prov int(1); publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("i");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		push; prov int(0); publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("j");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		push; prov int(0); publish;
		cast <appl(<term>)>;
		create;
		unpublish;
		publish;
		prov token("k");
		push;
		copy;
		cast cell(<term>);
		merge;
		publish;
		cast [token(<term>),<appl(<term>)>];
		bind;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		d_union;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		d_union;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		d_union;
		unpublish;
		merge;
		publish;
		cast [bindings(<term>),bindings(<term>)];
		override;
		unpublish;
		cast bindings(<term>);
		enter;
		trye @l12;
			@l110: 	scope;
		push; prov token("k"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push; scope; push; prov token("n"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		merge;
		publish;
		tryf @l110002;
			cast [<term>,<list>];
		component 1; cast int(<term>);
		push;
		copy;
		cast [<term>,<list>];
		component 2; cast int(<term>);
		merge;
		publish;
		trye @l1100010011;
			cast [int(<term>),int(<term>)];
		lt;
		catch @l1100010012;
	@l1100010011: fail; @l1100010012:
		push; copy; merge;
		unpublish; prov bool(1);
		catch @l110003;
	@l110002: prov bool(0); @l110003:
		unpublish;
		publish;
		tryf @l11002;
			tryf @l110011;
			tupleToList;
		push; prov bool(1); tupleToList;
		merge;
		publish;
		trye @l11001000011;
			cast [<appl(<term>)>,<appl(<term>)>];
		eq;
		catch @l11001000012;
	@l11001000011: fail; @l11001000012:
		push; copy; merge;
		unpublish;
		publish;
		scope;
		push; prov token("j"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		push; scope; push; prov token("i"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push; scope; push; prov token("j"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		merge;
		publish;
		cast [<term>,<list>];
		component 1; cast int(<term>);
		push;
		copy;
		cast [<term>,<list>];
		component 2; cast int(<term>);
		merge;
		publish;
		cast [int(<term>),int(<term>)];
		add;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [cell(<term>),<appl(<term>)>];
		update;
		unpublish;
		push; scope; push; prov token("i"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		push; scope; push; prov token("j"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push; scope; push; prov token("i"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		merge;
		publish;
		cast [<term>,<list>];
		component 1; cast int(<term>);
		push;
		copy;
		cast [<term>,<list>];
		component 2; cast int(<term>);
		merge;
		publish;
		cast [int(<term>),int(<term>)];
		sub;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [cell(<term>),<appl(<term>)>];
		update;
		unpublish;
		push; scope; push; prov token("k"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		push; scope; push; prov token("k"); merge;
		publish;
		cast [bindings(<term>),token(<term>)];
		find;
		unpublish; cast cell(<term>);
		publish;
		cast cell(<term>);
		inspect;
		unpublish;
		push; prov int(1); merge;
		publish;
		cast [<term>,<list>];
		component 1; cast int(<term>);
		push;
		copy;
		cast [<term>,<list>];
		component 2; cast int(<term>);
		merge;
		publish;
		cast [int(<term>),int(<term>)];
		add;
		unpublish;
		unpublish;
		merge;
		publish;
		cast [cell(<term>),<appl(<term>)>];
		update;
		unpublish;
		merge;
		merge;
		unpublish; goto @l110;
		catch @l110012;
	@l110011:		copy;
			tupleToList;
		push; prov bool(0); tupleToList;
		merge;
		publish;
		trye @l1100101011;
			cast [<appl(<term>)>,<appl(<term>)>];
		eq;
		catch @l1100101012;
	@l1100101011: fail; @l1100101012:
		push; copy; merge;
		unpublish; prov [];
	@l110012:
		catch @l11003;
	@l11002: prov []; raise;
	@l11003:
		unpublish;
		catch @l13;
	@l12:		epublish;
			tryf @l112;
			tupleToList;
		push; prov token("break"); tupleToList;
		merge;
		publish;
		trye @l1110011;
			cast [<appl(<term>)>,<appl(<term>)>];
		eq;
		catch @l1110012;
	@l1110011: fail; @l1110012:
		push; copy; merge;
		unpublish; prov [];
		catch @l113;
	@l112:		copy;
			raise;
	@l113:
			unpublish;
	@l13:
		leave;
		return;
	}