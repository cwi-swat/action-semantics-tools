[ [ Instructions , Default , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Id" ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Instructions" ) ) , no-attrs ) , [ lit ( "[" ) , < "ws-after-[" ( Layout ) > , appl ( list ( cf ( iter-star ( sort ( "Id" ) ) ) ) , < list ( Id-list ) > ) , < ws-after-list ( Layout ) > , lit ( "]" ) ] ) ] , [ Id-list , empty , [  ] ] , [ Id-list , single , [ < head ( Id ) > ] ] , [ Id-list , many , [ < head ( Id ) > , < ws-after-first ( Layout ) > , < [ tail ( Id-list ) ] > ] ] , [ Instruction , noarg-ins , appl ( prod ( [ cf ( sort ( "Id" ) ) ] , cf ( sort ( "Instruction" ) ) , attrs ( [ term ( cons ( "noarg-ins" ) ) ] ) ) , [ < id ( Id ) > ] ) ] , [ Instruction , arg-ins , appl ( prod ( [ cf ( sort ( "Id" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Arg" ) ) ] , cf ( sort ( "Instruction" ) ) , attrs ( [ term ( cons ( "arg-ins" ) ) ] ) ) , [ < id ( Id ) > , < ws-after-id ( Layout ) > , < argument ( Arg ) > ] ) ] , [ Statement , label-stat , appl ( prod ( [ cf ( sort ( "Label" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) ] , cf ( sort ( "Statement" ) ) , attrs ( [ term ( cons ( "label-stat" ) ) ] ) ) , [ < label ( Label ) > , < ws-after-label ( Layout ) > , lit ( ":" ) ] ) ] , [ Statement , ins-stat , appl ( prod ( [ cf ( sort ( "Instruction" ) ) , cf ( opt ( layout ) ) , lit ( ";" ) ] , cf ( sort ( "Statement" ) ) , attrs ( [ term ( cons ( "ins-stat" ) ) ] ) ) , [ < ins ( Instruction ) > , < ws-after-ins ( Layout ) > , lit ( ";" ) ] ) ] , [ Arg , code , appl ( prod ( [ cf ( sort ( "Program" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "code" ) ) ] ) ) , [ < code ( Program ) > ] ) ] , [ Arg , aterm , appl ( prod ( [ cf ( sort ( "ATerm" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "aterm" ) ) ] ) ) , [ < term ( ATerm ) > ] ) ] , [ Arg , number , appl ( prod ( [ cf ( sort ( "Number" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "number" ) ) ] ) ) , [ < number ( Number ) > ] ) ] , [ Arg , label , appl ( prod ( [ cf ( sort ( "Label" ) ) ] , cf ( sort ( "Arg" ) ) , attrs ( [ term ( cons ( "label" ) ) ] ) ) , [ < label ( Label ) > ] ) ] , [ Program , Default , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Statements" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "{" ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) , lit ( "," ) , cf ( opt ( layout ) ) , cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Program" ) ) , no-attrs ) , [ lit ( "{" ) , < "ws-after-{" ( Layout ) > , < stats ( Statements ) > , < ws-after-stats ( Layout ) > , lit ( "}" ) , < "ws-after-}" ( Layout ) > , lit ( "{" ) , < "ws-after-{" ( Layout ) > , lit ( "[" ) , < "ws-after-[" ( Layout ) > , < label ( ATerm ) > , < ws-after-label ( Layout ) > , lit ( "," ) , < "ws-after-," ( Layout ) > , < ann ( ATerm ) > , < ws-after-ann ( Layout ) > , lit ( "]" ) , < "ws-after-]" ( Layout ) > , lit ( "}" ) ] ) ] , [ Statements , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Statement" ) ) ) ] , cf ( sort ( "Statements" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Statement" ) ) ) ) , < list ( Statement-list ) > ) ] ) ] , [ Statement-list , empty , [  ] ] , [ Statement-list , single , [ < head ( Statement ) > ] ] , [ Statement-list , many , [ < head ( Statement ) > , < ws-after-first ( Layout ) > , < [ tail ( Statement-list ) ] > ] ] ]