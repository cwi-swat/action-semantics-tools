#include "AIL.h"

static char *AIL_opcode_strings[] = {
	[AIL_publish_opcode] "publish",
	[AIL_epublish_opcode] "epublish",
	[AIL_unpublish_opcode] "unpublish",
	[AIL_enter_opcode] "enter",
	[AIL_leave_opcode] "leave",
	[AIL_trye_opcode] "trye",
	[AIL_tryf_opcode] "tryf",
	[AIL_catche_opcode] "catche",
	[AIL_catchf_opcode] "catchf",
	[AIL_goto_opcode] "goto",
	[AIL_return_opcode] "return",
	[AIL_lock_opcode] "lock",
	[AIL_unlock_opcode] "unlock",
	[AIL_call_opcode] "call",
	[AIL_raise_opcode] "raise",
	[AIL_fail_opcode] "fail",
	[AIL_gosub_opcode] "gosub",
	[AIL_merge_opcode] "merge",
	[AIL_emerge_opcode] "emerge",
	[AIL_push_opcode] "push",
	[AIL_pushr_opcode] "pushr",
	[AIL_copy_opcode] "copy",
	[AIL_create_opcode] "create",
	[AIL_inspect_opcode] "inspect",
	[AIL_destroy_opcode] "destroy",
	[AIL_update_opcode] "update",
	[AIL_activate_opcode] "activate",
	[AIL_deactivate_opcode] "deactivate",
	[AIL_send_opcode] "send",
	[AIL_receive_opcode] "receive",
	[AIL_time_opcode] "time",
	[AIL_agent_opcode] "agent",
	[AIL_scope_opcode] "scope",
	[AIL_random_opcode] "random",
	[AIL_add_opcode] "add",
	[AIL_sub_opcode] "sub",
	[AIL_mul_opcode] "mul",
	[AIL_csub_opcode] "csub",
	[AIL_bind_opcode] "bind",
	[AIL_find_opcode] "find",
	[AIL_not_opcode] "not",
	[AIL_override_opcode] "override",
	[AIL_d_union_opcode] "d_union",
	[AIL_then_opcode] "then",
	[AIL_and_then_opcode] "and_then",
	[AIL_and_opcode] "and",
	[AIL_provide_opcode] "provide",
	[AIL_exceptionally_opcode] "exceptionally",
	[AIL_and_exceptionally_opcode] "and_exceptionally",
	[AIL_otherwise_opcode] "otherwise",
	[AIL_indivisibly_opcode] "indivisibly",
	[AIL_hence_opcode] "hence",
	[AIL_cast_opcode] "cast",
	[AIL_type_opcode] "type",
	[AIL_component_opcode] "component",
	[AIL_equals_opcode] "equals",
	[AIL_less_than_opcode] "less_than",
	[AIL_greater_than_opcode] "greater_than",
	[AIL_less_than_or_eq_opcode] "less_than_or_eq",
	[AIL_greater_than_or_eq_opcode] "greater_than_or_eq",
	[AIL_array_opcode] "array",
	[AIL_put_at_opcode] "put_at",
	[AIL_index_opcode] "index"
};


char *AIL_get_string_for_opcode(int op) {
	return AIL_opcode_strings[op];
}
