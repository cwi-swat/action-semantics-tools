/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (ailc-opt.h)
 *  
 *  It has been AutoGen-ed  Wednesday July 10, 2002 at 06:55:42 PM CEST
 *  From the definitions    ailc-opt.def
 *  and the template file   options
 */
/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the ailc program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */
#ifndef AUTOOPTS_AILC_OPT_H_GUARD
#define AUTOOPTS_AILC_OPT_H_GUARD

/*
 * ailc copyright  Tijs van der Storm - all rights reserved
 *
 * ailc is free software.
 * 
 * You may redistribute it and/or modify it under the terms of the
 * GNU General Public License, as published by the Free Software
 * Foundation; either version 2, or (at your option) any later version.
 * 
 * ailc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ailc.  See the file "COPYING".  If not,
 * write to:  The Free Software Foundation, Inc.,
 *            59 Temple Place - Suite 330,
 *            Boston,  MA  02111-1307, USA.
 */
#include <options.h>

/*
 *  Enumeration of each option:
 */
typedef enum {
        INDEX_OPT_INPUT            =  0,
        INDEX_OPT_OUTPUT           =  1,
        INDEX_OPT_VERBOSE          =  2,
        INDEX_OPT_GENERATE_API     =  3,
        INDEX_OPT_NAME             =  4,
        INDEX_OPT_PREFIX           =  5,
        INDEX_OPT_AIL_LIST         =  6,
        INDEX_OPT_VERSION          = 7,
        INDEX_OPT_HELP             = 8,
        INDEX_OPT_MORE_HELP        = 9
} teOptIndex;

#define OPTION_CT    10
#define AILC_VERSION       "0.1"
#define AILC_FULL_VERSION  "ailc - AIL to ABF compiler - Ver. 0.1"

/*
 *  Interface defines for all options.  Replace "n" with
 *  the UPPER_CASED option name (as in the teOptIndex
 *  enumeration above).  e.g. HAVE_OPT( INPUT )
 */
#ifdef __STDC__
#define     DESC(n)     ailcOptions.pOptDesc[INDEX_OPT_ ## n]
#else
#define     DESC(n)     ailcOptions.pOptDesc[INDEX_OPT_/**/n]
#endif
#define     HAVE_OPT(n) (! UNUSED_OPT(&DESC(n)))
#define      OPT_ARG(n) (DESC(n).pzLastArg)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT;   \
                if ( (DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = NULL )

/*
 *  Interface defines for specific options.
 */
#define VALUE_OPT_INPUT          'i'
#define VALUE_OPT_OUTPUT         'o'
#define VALUE_OPT_VERBOSE        'v'
#define VALUE_OPT_GENERATE_API   'g'
#define VALUE_OPT_NAME           'n'
#define VALUE_OPT_PREFIX         'p'
#define VALUE_OPT_AIL_LIST       'l'

#define VALUE_OPT_VERSION        'v'
#define VALUE_OPT_HELP           'h'
#define VALUE_OPT_MORE_HELP      '?'

/*
 *  Interface defines not associated with particular options
 */
#define  ERRSKIP_OPTERR STMTS( ailcOptions.fOptSet &= ~OPTPROC_ERRSTOP )
#define  ERRSTOP_OPTERR STMTS( ailcOptions.fOptSet |= OPTPROC_ERRSTOP )
#define  RESTART_OPT(n) STMTS( \
                ailcOptions.curOptIdx = (n); \
                ailcOptions.pzCurOpt  = NULL )
#define    START_OPT    RESTART_OPT(1)
#define     USAGE(c)    (*ailcOptions.pUsageProc)( &ailcOptions, c )

/* * * * * *
 *
 *  Declare the ailc option descriptor.
 */
#ifdef  __cplusplus
extern "C" {
#endif

extern tOptions   ailcOptions;

#ifdef  __cplusplus
}
#endif
#endif /* AUTOOPTS_AILC_OPT_H_GUARD */
