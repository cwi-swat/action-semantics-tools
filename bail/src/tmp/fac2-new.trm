{ scope ; push 4 { [ type , int ] } ; publish ; create ; unpublish ; publish ; push "x" { [ type , token ] } ; cast cell ; merge ; publish ; bind ; unpublish ; unpublish ; push 1 { [ type , int ] } ; publish ; create ; unpublish ; publish ; push "y" { [ type , token ] } ; cast cell ; merge ; publish ; bind ; unpublish ; unpublish ; merge ; publish ; d_union ; unpublish ; merge ; publish ; override ; unpublish ; enter ; trye @l11 ; scope ; push "unf" { [ type , token ] } ; push { scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; push 0 { [ type , int ] } ; merge ; publish ; tryf @l11000101001 ; component 1 ; publish ; cast int ; unpublish ; component 2 ; publish ; cast int ; unpublish ; merge ; publish ; trye @l110001010010010 ; greater_than ; catche @l110001010010012 ; @l110001010010010 : epublish ; fail ; unpublish ; @l110001010010012 : copy ; merge ; unpublish ; publish ; push 1 { [ type , bool ] } ; unpublish ; catchf @l11000101003 ; @l11000101001 : push 0 { [ type , bool ] } ; @l11000101003 : unpublish ; publish ; tryf @l1100010101 ; tryf @l11000101010 ; cast data ; publish ; tupleToList ; unpublish ; push 1 { [ type , bool ] } ; publish ; tupleToList ; unpublish ; merge ; publish ; trye @l1100010101000010 ; equals ; catche @l1100010101000012 ; @l1100010101000010 : epublish ; fail ; unpublish ; @l1100010101000012 : copy ; merge ; unpublish ; publish ; scope ; push "y" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; scope ; push "y" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; merge ; publish ; component 1 ; publish ; cast int ; unpublish ; component 2 ; publish ; cast int ; unpublish ; merge ; publish ; mul ; unpublish ; unpublish ; merge ; publish ; update ; unpublish ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; push 1 { [ type , int ] } ; merge ; publish ; component 1 ; publish ; cast int ; unpublish ; component 2 ; publish ; cast int ; unpublish ; merge ; publish ; sub ; unpublish ; unpublish ; merge ; publish ; update ; unpublish ; merge ; unpublish ; cast data ; publish ; provide ; unpublish ; scope ; publish ; provide ; unpublish ; scope ; push "unf" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast action ; unpublish ; merge ; publish ; hence ; unpublish ; merge ; publish ; then ; unpublish ; publish ; call ; unpublish ; merge ; catchf @l11000101012 ; @l11000101010 : cast data ; publish ; tupleToList ; unpublish ; push 0 { [ type , bool ] } ; publish ; tupleToList ; unpublish ; merge ; publish ; trye @l110001010101010 ; equals ; catche @l110001010101012 ; @l110001010101010 : epublish ; fail ; unpublish ; @l110001010101012 : copy ; merge ; unpublish ; publish ; push [  ] { [ type , empty ] } ; unpublish ; @l11000101012 : catchf @l1100010103 ; @l1100010101 : push [  ] { [ type , empty ] } ; publish ; raise ; unpublish ; @l1100010103 : unpublish ; } { [ type , action ] } ; merge ; publish ; bind ; unpublish ; merge ; publish ; override ; unpublish ; enter ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; push 0 { [ type , int ] } ; merge ; publish ; tryf @l110101 ; component 1 ; publish ; cast int ; unpublish ; component 2 ; publish ; cast int ; unpublish ; merge ; publish ; trye @l1101010010 ; greater_than ; catche @l1101010012 ; @l1101010010 : epublish ; fail ; unpublish ; @l1101010012 : copy ; merge ; unpublish ; publish ; push 1 { [ type , bool ] } ; unpublish ; catchf @l110103 ; @l110101 : push 0 { [ type , bool ] } ; @l110103 : unpublish ; publish ; tryf @l11011 ; tryf @l110110 ; cast data ; publish ; tupleToList ; unpublish ; push 1 { [ type , bool ] } ; publish ; tupleToList ; unpublish ; merge ; publish ; trye @l11011000010 ; equals ; catche @l11011000012 ; @l11011000010 : epublish ; fail ; unpublish ; @l11011000012 : copy ; merge ; unpublish ; publish ; scope ; push "y" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; scope ; push "y" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; merge ; publish ; component 1 ; publish ; cast int ; unpublish ; component 2 ; publish ; cast int ; unpublish ; merge ; publish ; mul ; unpublish ; unpublish ; merge ; publish ; update ; unpublish ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; scope ; push "x" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast cell ; unpublish ; publish ; inspect ; unpublish ; push 1 { [ type , int ] } ; merge ; publish ; component 1 ; publish ; cast int ; unpublish ; component 2 ; publish ; cast int ; unpublish ; merge ; publish ; sub ; unpublish ; unpublish ; merge ; publish ; update ; unpublish ; merge ; unpublish ; cast data ; publish ; provide ; unpublish ; scope ; publish ; provide ; unpublish ; scope ; push "unf" { [ type , token ] } ; merge ; publish ; find ; unpublish ; publish ; cast action ; unpublish ; merge ; publish ; hence ; unpublish ; merge ; publish ; then ; unpublish ; publish ; call ; unpublish ; merge ; catchf @l110112 ; @l110110 : cast data ; publish ; tupleToList ; unpublish ; push 0 { [ type , bool ] } ; publish ; tupleToList ; unpublish ; merge ; publish ; trye @l1101101010 ; equals ; catche @l1101101012 ; @l1101101010 : epublish ; fail ; unpublish ; @l1101101012 : copy ; merge ; unpublish ; publish ; push [  ] { [ type , empty ] } ; unpublish ; @l110112 : catchf @l11013 ; @l11011 : push [  ] { [ type , empty ] } ; publish ; raise ; unpublish ; @l11013 : unpublish ; leave ; catche @l13 ; @l11 : epublish ; tryf @l111 ; cast data ; publish ; tupleToList ; unpublish ; push "break" { [ type , token ] } ; publish ; tupleToList ; unpublish ; merge ; publish ; trye @l1110010 ; equals ; catche @l1110012 ; @l1110010 : epublish ; fail ; unpublish ; @l1110012 : copy ; merge ; unpublish ; publish ; push [  ] { [ type , empty ] } ; unpublish ; catchf @l113 ; @l111 : raise ; @l113 : unpublish ; @l13 : leave ; return ; } { [ type , action ] }